<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:misc="http://www.utiba.com/delirium/ws/Misc" xmlns:tns="urn:UMARKETSCWS" xmlns:typedquery="http://www.utiba.com/delirium/ws/TypedQuery" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:stdquery="http://www.utiba.com/delirium/ws/StdQuery" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" name="UMarketSC" targetNamespace="urn:UMARKETSCWS" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="urn:UMARKETSCWS">
      <xsd:import schemaLocation="http://10.1.5.64:8280/services/umarketsc?xsd=2" namespace="http://www.utiba.com/delirium/ws/StdQuery" />
      <xsd:import schemaLocation="http://10.1.5.64:8280/services/umarketsc?xsd=3" namespace="http://www.utiba.com/delirium/ws/TypedQuery" />
      <xsd:import schemaLocation="http://10.1.5.64:8280/services/umarketsc?xsd=1" namespace="http://www.utiba.com/delirium/ws/Misc" />
      <xsd:complexType name="KeyValuePair">
        <xsd:sequence minOccurs="1" maxOccurs="1">
          <xsd:element name="key" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                A key used for retrieving the matching value.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="value" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                The value associated with the given key.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="KeyValuePairMap">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="keyValuePair" type="tns:KeyValuePair">
            <xsd:annotation>
              <xsd:documentation>
                                A collection of key/value pairs. Self-explanatory.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="getTransactionByIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="ID" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TransactionResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="transaction" type="typedquery:Transaction">
                <xsd:annotation>
                  <xsd:documentation>
                                        The transaction returned.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getTransactionByID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getTransactionByIDRequest" type="tns:getTransactionByIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="TransactionResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="TransactionReturn" type="tns:TransactionResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="MarketAgent">
        <xsd:complexContent mixed="false">
          <xsd:extension base="typedquery:Agent">
            <xsd:annotation>
              <xsd:documentation />
            </xsd:annotation>
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="createdDate" type="xsd:dateTime">
                <xsd:annotation>
                  <xsd:documentation>
                                        The date the agent was created.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="deletedDate" type="xsd:dateTime">
                <xsd:annotation>
                  <xsd:documentation>
                                        The date the agent was deleted, or null.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="organisation" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Organisation.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="DSComission" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Direct Sale Commission.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="POSComission" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Point Of Sale Commission.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="agentObject" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The special agent object.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="loBalThreshold" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The low balance threshold for autocashin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="loBalAmount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount for autocashin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="loBalSource" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The source agent for autocashin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hiBalThreshold" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The high balance threshold for autocashout.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hiBalAmount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount for autocashout.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hiBalSource" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The source agent for autocashout.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lastAutoCash" type="xsd:dateTime">
                <xsd:annotation>
                  <xsd:documentation>
                                        The time of the last autocashin/out. Used to ensure only one attempt per hour.
                                        Can be null.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="category" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent category. For instance: Distributor or User.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="getAgentGroupByAgentIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agentID" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent ID for retrieving group information.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AgentGroupsResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="agentGroups" type="typedquery:AgentGroup">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent group/s. </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAgentGroupByAgentID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAgentGroupByAgentIDRequest" type="tns:getAgentGroupByAgentIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAllAgentGroups">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAllAgentGroupsRequest" type="tns:getAllGroupsRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="AgentGroupsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="AgentGroupsReturn" type="tns:AgentGroupsResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAgentByReferenceRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="reference" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent reference.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="category" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent category. Agent will not be returned if it doesn't belong to this category.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
            <xsd:attribute fixed="false" name="autogen" type="xsd:boolean">
              <xsd:annotation>
                <xsd:documentation>
                                    Fixed value to false. Should not be changed.
                                </xsd:documentation>
              </xsd:annotation>
            </xsd:attribute>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AgentResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="tns:MarketAgent" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAgentByReference">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAgentByReferenceRequest" type="tns:getAgentByReferenceRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="AgentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="AgentReturn" type="tns:AgentResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAgentByReferenceIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="referenceID" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Reference ID of the agent to retrieve.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAgentByReferenceID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAgentByReferenceIDRequest" type="tns:getAgentByReferenceIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAccountByReferenceIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="referenceID" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent reference.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="getAccountByReferenceIDAndTypeRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="referenceID" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent reference.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
            <xsd:attribute fixed="false" name="autogen" type="xsd:boolean">
              <xsd:annotation>
                <xsd:documentation>
                                    Fixed value to false. Should not be changed.
                                </xsd:documentation>
              </xsd:annotation>
            </xsd:attribute>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AccountsResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="accounts" type="typedquery:Account">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant accounts, if existing.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AccountResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="account" type="typedquery:Account">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant account, if existing.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAccountByReferenceID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAccountByReferenceIDRequest" type="tns:getAccountByReferenceIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAccountByReferenceIDAndType">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAccountByReferenceIDAndTypeRequest" type="tns:getAccountByReferenceIDAndTypeRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="AccountsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="AccountsReturn" type="tns:AccountsResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="AccountResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="AccountReturn" type="tns:AccountResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="pin">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="pinRequest" type="tns:pinRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="pinRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="initiator" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent that is changing the PIN.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The SHA encoded existing password. See login above for details on how to encode
                                        the pin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="new_pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The new password. The password is sent to the platform in plain text.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="pinResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="pinReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="sales">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="salesRequest" type="tns:salesRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="salesRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The wallet to get a sales report for. If not specified – get total sales for all
                                        wallets.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The special agent the report is in respect to.
                                        For example – 'bank' or 'airtime' etc. If not specified – get total sales for
                                        all special agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="start" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Start date report operates from. If not provided – default to today.
                                        Start date is always start of day. i.e. 00:00:00
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="start_offset" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Number of days to offset start date by. -ve values indicate a offset into the
                                        past, +ve values indicate offset into the future.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="end" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        End date report operates to. If not provided – default to start.
                                        (NOT start+start_offset)
                                        End date indicates end of day/start of next day (not inclusive of midnight).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="end_offset" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Number of days to offset end date by. -ve values indicate a offset into the
                                        past, +ve values indicate offset into the future.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="salesResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="salesReturn" type="tns:salesResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="salesResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="sum" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Total sum of matching transactions. Although from perspective of
                                        initiator the system is tallying debit (-ve) transactions, this
                                        figure is to be reported as a +ve number.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="count" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Total number of matching transactions.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="createcoupon">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createcouponRequest" type="tns:createcouponRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createcouponRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of the transaction/coupon.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="wallet_type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of wallet to charge eg 1=E­Wallet. Default to 1 if not provided.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reserve" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        If set – then amount specified is to be
                                        preserved with creation of coupon. If
                                        initiator does not have enough funds, then
                                        cancel operations.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="provider" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The provider of the coupon. Defaults to initiator.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient of the coupon.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="coupon_type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        0=Multiple use – unused money can be
                                        collected. This is the default coupon_type if not
                                        provided.
                                        1=Single use – unused money discarded.
                                        2=Single use – collected amount must
                                        match allocated amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="req_conf_provider" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Require provider confirmation. If this is set
                                        to true, and 'provider' is not provided,
                                        initiator will be used. Default false.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="req_conf_recipient" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Require recipient confirmation. If this is set
                                        to true, 'recipient' must be provided. Default
                                        false.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The coupon rule to evaluate whenever an
                                        attempt is made to bill against this
                                        coupon/authorization.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="expiry" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The date/time when the coupon will automatically close.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        If provided, this coupon id will be used during coupon creation.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient_name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient's name. Could be used for validation by a retailer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Extra information eg current, rates.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="createcouponResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createcouponReturn" type="tns:createcouponResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createcouponResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The coupon id created or passed through from the request.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="payment_createcoupon">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="payment_createcouponRequest" type="tns:payment_createcouponRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="payment_createcouponRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of the transaction/coupon.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="wallet_type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of wallet to charge eg 1=E­Wallet. Default to 1 if not provided.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reserve" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        If set – then amount specified is to be
                                        preserved with creation of coupon. If
                                        initiator does not have enough funds, then
                                        cancel operations.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="provider" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The provider of the coupon. Defaults to initiator.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient of the coupon.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="coupon_type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        0=Multiple use – unused money can be
                                        collected. This is the default coupon_type if not
                                        provided.
                                        1=Single use – unused money discarded.
                                        2=Single use – collected amount must
                                        match allocated amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="req_conf_provider" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Require provider confirmation. If this is set
                                        to true, and 'provider' is not provided,
                                        initiator will be used. Default false.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="req_conf_recipient" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Require recipient confirmation. If this is set
                                        to true, 'recipient' must be provided. Default
                                        false.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The coupon rule to evaluate whenever an
                                        attempt is made to bill against this
                                        coupon/authorization.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="expiry" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The date/time when the coupon will automatically close.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        If provided, this coupon id will be used during coupon creation.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient_name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient's name. Could be used for validation by a retailer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Extra information eg current, rates.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="payment_createcouponResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="payment_createcouponReturn" type="tns:payment_createcouponResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="payment_createcouponResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The coupon id created or passed through from the request.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="activate">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="activateRequest" type="tns:activateRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="activateRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="initiator" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent that is requesting activation.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Ref No of Agent to activate. Could be a msisdn, landline number etc.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The password. The password is sent to the platform in plain text.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="reg_no" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Serial number of registration form.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="activateResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="activateReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="sell">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="sellRequest" type="tns:sellRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="sellRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="to" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Reference of target/creditor.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Amount to request.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="sellResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="sellReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="buy">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="buyRequest" type="tns:buyRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="buyRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The product provider. Valid values are: airtime.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type to use. 1 = e­money. 2 = stock. Default is 1 (e­money )
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount to pay.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="product" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The product code.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient of the purchase. If not specified default to the initiator.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reference1" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Customer ref #1.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reference2" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Customer ref #2.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="notify_alternate" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Send notification to agent alternate.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="buyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="buyReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="donate">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="donateRequest" type="tns:donateRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="donateRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The charity to send the funds to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="charity" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        If the charity is a charity aggregator, this
                                        field is used to specify the actual charity or
                                        branch/arm within the organisation the
                                        donation is intended for
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to transfer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="notify_alternate" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Send notification to notify_alternate field of agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="donateResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="donateReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="authorise">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="authoriseRequest" type="tns:authoriseRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="authoriseRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        If provided only returns authorisation analysis on a single function.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="authoriseResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="authoriseReturn" type="tns:authoriseResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="authoriseResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="functions" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key/value pair list of functions ­ set to 'allow' or 'deny'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="default_access" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        'Allow' or 'deny'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="authorise2">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="authoriseRequest" type="tns:authoriseRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="authorise2Response">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="authorise2Return" type="tns:authorise2ResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="authorise2ResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="functions" type="misc:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key/value pair list of functions ­ set to 'allow' or 'deny'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="default_access" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        'Allow' or 'deny'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="reverse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="reverseRequest" type="tns:reverseRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="reverseRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="transactionID" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="transactionExtRef" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Client reference for transaction to be reversed.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount to reverse. Optional. Default is to reverse the full amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="reverseResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="reverseReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="login">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="loginRequest" type="tns:loginRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="loginRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="initiator" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent that is logging in.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The login password. The password is
                                        cryptographically hashed to further protect it. Please see the document
                                        "PD-SC-SOAP-UM-FS-07-10-A7 UMarket SOAP API Functional Specification.pdf"
                                        for details on how to generate the pin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="loginResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="loginReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="balance">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="balanceRequest" type="tns:balanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="balanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Limit Enquiry to this specific wallet. Valid values include standard wallet
                                        type:
                                        1 (e­wallet), 2 (stock) and 3 (points). And custom wallet types which are only
                                        available from custom UMarket products.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="balanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="balanceReturn" type="tns:balanceResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="balanceResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="avail" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Available “custom wallet” balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="avail_1" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Available e­wallet balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="avail_2" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Available stock balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="avail_3" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Available points balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="current" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Current “custom wallet” balance
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="current_1" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Current e­wallet balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="current_2" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Current stock balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="current_3" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Current points balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pending" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Pending “custom wallet” balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pending_1" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Pending e­wallet balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pending_2" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Pending stock balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pending_3" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Pending points balance.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="balances" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant account balances.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="viewContact">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="viewContactRequest" type="tns:viewContactRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="viewContactRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="msisdn" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key used to identify a contact. Can be given as a parameter if the key
                                        of the contact to be retrieved is known. This parameter is optional and
                                        if not specified, all contacts will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="retrieve_params" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                    	A comma seperated list of attributes to be retrieved of the contact. 
                                    	This parameter is optional and if not specified, all the attributes 
                                    	will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="viewContactResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="viewContactReturn" type="tns:viewContactResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="viewContactResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="contacts" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        The attributes of the contact/contacts.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addContact">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addContactRequest" type="tns:addContactRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addContactRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="msisdn" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key used to identify a contact. Can be given as a parameter if the key
                                        of the contact to be retrieved is known. This parameter is optional and
                                        if not specified, all contacts will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="contact_params" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                    	A comma seperated list of attributes to be retrieved of the contact. 
                                    	This parameter is optional and if not specified, all the attributes 
                                    	will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="attributes" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        The attributes of the contact/contacts.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addContactResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addContactReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="modifyContact">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modifyContactRequest" type="tns:modifyContactRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modifyContactRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="msisdn" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key used to identify a contact. Can be given as a parameter if the key
                                        of the contact to be retrieved is known. This parameter is optional and
                                        if not specified, all contacts will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="contact_params" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                    	A comma seperated list of attributes to be retrieved of the contact. 
                                    	This parameter is optional and if not specified, all the attributes 
                                    	will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="attributes" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        The attributes of the contact/contacts.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modifyContactResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modifyContactReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="deleteContact">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteContactRequest" type="tns:deleteContactRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deleteContactRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="msisdn" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key used to identify a contact. Can be given as a parameter if the key
                                        of the contact to be retrieved is known. This parameter is optional and
                                        if not specified, all contacts will be retrieved.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteContactResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteContactReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delete">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteRequest" type="tns:deleteRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deleteRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Reference of the agent to delete. If not given, will delete the agent issuing
                                        the request.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="createsession">
        <xsd:complexType>
          <xsd:annotation>
            <xsd:documentation>
                            No parameters.
                        </xsd:documentation>
          </xsd:annotation>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="createsessionResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createsessionReturn" type="tns:createsessionResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createsessionResponseType">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="1" name="sessionid" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                The resultant session id. Session Ids are 20 character
                                alphanumeric strings. For example a session may be:
                                1UT3UKBGYNNRTB5W34P5
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="result" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>
                                The result code represents the actual outcome of the request. A result of 0
                                represents success. Non zero values represent failure. See Appendix A for
                                complete list of possible result codes.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="result_namespace" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                Represents a string. It can be one of the following values:
                                'soap' - a soap based result.
                                'session' – a session based result.
                                'core' – a result generated by the biz component.
                                'umarket' – a result generated by the biz component.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="delschedule">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delscheduleRequest" type="tns:delscheduleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delscheduleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="sched_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Schedule ID of the schedule to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delscheduleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delscheduleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="transquery">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transqueryRequest" type="tns:transqueryRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="transqueryRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="transid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The transaction to query.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="transqueryResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transqueryReturn" type="tns:transqueryResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="transqueryResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="initiator" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Agent reference of the initiator.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="creditor" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Agent reference of the creditor.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="debtor" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Agent reference of the debtor.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of the transaction.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        1: e­money 2: stock 3: points
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="external" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Did this transaction involve an external system, such as a bank or IN?
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="date" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Number of milliseconds since Jan­ 1 ­1970 (UTC)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="state" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        1: progress
                                        2: completed
                                        5: rolling back
                                        6: rolled back
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="trans_result" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction result code.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="trans_result_namespace" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction result namespace.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="transqueryext">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transqueryextRequest" type="tns:transqueryextRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="transqueryextRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="transactionExtRef" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Client reference for the transaction to query.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="transqueryextResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transqueryextReturn" type="tns:transqueryextResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="transqueryextResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of the transaction.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="date" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Number of milliseconds since Jan­ 1 ­1970 (UTC)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="state" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        1: progress
                                        2: completed
                                        5: rolling back
                                        6: rolled back
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="trans_result" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction result code.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="trans_result_namespace" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction result namespace.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="query_transid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Transaction ID of the queried transaction.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="nextid">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="nextidRequest" type="tns:nextidRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="nextidRequestType">
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="sessionid" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                A valid session id (for most functions you will have to login)
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="nextidResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="nextidReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="deactivate">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deactivateRequest" type="tns:standardBizRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="deactivateResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deactivateReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="bankcashin">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="bankcashinRequest" type="tns:bankcashinRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="bankcashinRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The bank source to cashin from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="usedefault" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Use initiators default bank settings.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Used to specify details such as the bank account bank
                                        number to be debited. The account detail required
                                        varies between end bank systems, so the format of
                                        this parameter can be customised to suit. The
                                        standard value is just the bank account to be
                                        debited.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to cashin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="bankcashinResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="bankcashinReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="confirm">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="confirmRequest" type="tns:confirmRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="confirmRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="transid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The ID of the transaction awaiting
                                        confirmation. If not provided the system will
                                        confirm the current outstanding transaction
                                        – if only one such transaction exists
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="action" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The action to take. 'commit' or 'rollback'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="confirmResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="confirmReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delchild">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delchildRequest" type="tns:delchildRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delchildRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The child the client no longer intends to sell stock to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the source. If not present assume source is the initiator (i.e. The
                                        logged in SOAP user)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delchildResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delchildReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="transfer">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transferRequest" type="tns:transferRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="transferRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="to" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent to send the funds to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to transfer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of funds to send. Valid values are
                                        1 (e­wallet), 2 (stock) and 3 (points). If not
                                        specified defaults to e­wallet. If not specified
                                        defaults to 1 (e­wallet).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="message" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Additional message/notes to send to the
                                        recipient as part of the transfer notification
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="transferResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="transferReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="payment">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="paymentRequest" type="tns:paymentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="paymentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="to" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent to send the funds to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to transfer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of funds to send. Valid values are
                                        1 (e­wallet), 2 (stock) and 3 (points). If not
                                        specified defaults to e­wallet. If not specified
                                        defaults to 1 (e­wallet).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="message" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Additional message/notes to send to the
                                        recipient as part of the transfer notification
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="paymentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="paymentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="a2atransfer">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="a2atransferRequest" type="tns:a2atransferRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="a2atransferRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="to" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent to send the funds to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to A2A transfer.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of funds to send. Valid values are
                                        1 (e­wallet), 2 (stock) and 3 (points). If not
                                        specified defaults to e­wallet. If not specified
                                        defaults to 1 (e­wallet).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="message" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Additional message/notes to send to the
                                        recipient as part of the A2A transfer notification
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="a2atransferResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="a2atransferReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delparent">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delparentRequest" type="tns:delparentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delparentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The parent the client no longer intends to purchase stock from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the source. If not present assume source is the initiator (i.e. The
                                        logged in SOAP user)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delparentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delparentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="modify">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modifyRequest" type="tns:modifyRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modifyRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Agent to modify. If not provided – assume modify the initiating agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the name of the Agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="email_address" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the optional email address.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="sms_address" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the optional SMS address.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="language" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the agent language. I.E. "EN" for english.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_thres" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        When the balance goes below this amount, trigger a bank cash­in (optional).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        If performing a bank cash in, request this amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Which bank account to source the funds from (format will be implementation
                                        specific).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_thres" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        When the balance goes above this amount, trigger a bank cash­out (optional)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        If performing a bank cash out, send this amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Which bank account to transfer the funds to (format will be implementation
                                        specific).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="status">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the agent status. Only change value for parameters provided.
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                  <xsd:all>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Registered" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not the agent has registered nor not.
                                                    A user enables register via self register or registration via another proxy.
                                                    Once an agent is registered it cannot be unregistered.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Active" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not the agent is active.
                                                    An inactive agent cannot initiate transactions but they can still receive funds.
                                                    Typically the agent self sets/unsets active status.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Suspended" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not the agent is stopped.
                                                    A stopped agent cannot participate in any transaction in any capacity.
                                                    Typically the agent self sets/unsets stop status.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Blacklisted" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not the agent is suspended. A suspended agent cannot participate
                                                    in any transaction in any capacity. The intention of suspended is to lock an agent on an operator
                                                    level. Suspend differs from frozen below in that suspended is intended to be used to
                                                    block agents for non fraud/security purposes. It is intended to be a less 'severe'
                                                    status to frozen.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Stopped" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not the agent is frozen. A frozen agent cannot participate in any transaction in any capacity.
                                                    Only the operator, can set/unset the frozen status. The intention of frozen status is to lock an agent
                                                    on an operator level – for example in response to suspected fraud.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                  </xsd:all>
                </xsd:complexType>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the agent type flags. Only change value for parameters provided.
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                  <xsd:all>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Subscriber" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    A regular subscriber agent in the system.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Merchant" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    A Merchant is allowed to issue the SELL command.
                                                    A sell command initiates a debit of another agents wallet
                                                     – requiring them to confirm the operation for the transaction to proceed.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Trusted" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    A Trusted agent is an agent that can run a command, like SELL,
                                                    that debits another agents wallet but not require the debitor agent to confirm the transaction.
                                                    For example an agent with trusted+merchant can issue a sell command and debit the wallets of others without gaining their permission
                                                     – the operation just goes ahead.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Cash" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    A Cash agent is an agent that can inject money into the system and take money out of the system.
                                                    In the system all money is traceable via reports.
                                                    All money in the system has an ultimate origin and ultimate destination where it entered and then existed the system.
                                                    Cash agents indicate agents in the system that act as entry/exit points.
                                                    Audit trails begin and end with cash agents.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="0" maxOccurs="1" name="Registrar" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    A registrar is an agent the register other agents on their behalf.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                  </xsd:all>
                </xsd:complexType>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ds_commission" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the direct sale commission. (Rule ID)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pos_commission" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the point of sale commission. (Rule ID)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent_object" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Change the special agent object reference.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="organisation">
                <xsd:annotation>
                  <xsd:documentation>
                                        Set agent organisation. (operator or 3rd party).
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                  <xsd:restriction base="xsd:int">
                    <xsd:enumeration id="THIRD_PARTY" value="0" />
                    <xsd:enumeration id="OPERATOR" value="1" />
                  </xsd:restriction>
                </xsd:simpleType>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="extra_params" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of key value pairs to store on the
                                        agent. Each extra_params entry contains a
                                        single 'key' parameter and a single 'value'
                                        parameter.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modifyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modifyReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="billpaycompany">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billpaycompanyRequest" type="tns:billpaycompanyRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="billpaycompanyRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="company_code" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The utility to pay the bill to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount to pay.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Bill account identifier.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="customer_msisdn" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Ref2 field.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type to use. 1 = e­money. 2 = stock. Default is 1 (e­money).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="notify_alternate" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Send notification to agent alternate.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="billpaycompanyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billpaycompanyReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="billpay">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billpayRequest" type="tns:billpayRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="billpayRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The utility to pay the bill to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type to use. 1 = e­money. 2 = stock. Default is 1 (e­money).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount to pay.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reference1" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Ref1 field.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="reference2" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Ref2 field.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Bill account identifier.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="notify_alternate" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Send notification to agent alternate.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="billpayResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billpayReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="joinparent">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="joinparentRequest" type="tns:joinparentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="joinparentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The parent the client intends to purchase stock from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the source. If not present assume source is the initiator (i.e. The
                                        logged in SOAP user)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="joinparentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="joinparentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="changeparent">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="changeparentRequest" type="tns:changeparentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="changeparentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="oldparent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The original parent the client purchased stock from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="newparent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The new parent the client will purchased stock from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="child" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The child to move from one parent to another
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="max_children" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The maximum number of children to move. This overides configuration. If this number is made to large it can potentially slow down the system. A value of 0 means no limit
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="changeparentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="changeparentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="link">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="linkRequest" type="tns:linkRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="linkRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent to link.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The owner agent to link to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The type of link to create. 'subagent' for sub
                                        agent type link or 'associated' for
                                        association type link.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="linkResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="linkReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="stop">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="stopRequest" type="tns:standardBizRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="stopResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="stopReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="joinchild">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="joinchildRequest" type="tns:joinchildRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="joinchildRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The child the client intends to sell stock to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the source. If not present assume source is the initiator (i.e. The
                                        logged in SOAP user)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="joinchildResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="joinchildReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="query">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="queryRequest" type="tns:queryRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="queryRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="queryResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="queryReturn" type="tns:queryResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="queryResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="last_credit_value" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The last credit to the provided wallet, or the last credit to any wallet of the
                                        agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="last_credit_date" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The last credit date.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="last_debit_value" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The last debit from the provided wallet, or the last debit from any wallet of
                                        the agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="last_debit_date" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The last debit date.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="billcollect">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billcollectRequest" type="tns:billcollectRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="billcollectRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="to" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent who is going to pay the bill.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount to pay.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Bill details – such as ref no.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="billcollectResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="billcollectReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="register">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="registerRequest" type="tns:registerRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="registerRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="initiator" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent that is requesting self register.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The Ref No of Agent to register. Could be a msisdn, landline number etc.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_alt_ref" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Alternative reference.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="new_pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The new password. The password is sent to the platform in plain text.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="language" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        'en' for English language preference. Blank, or not supplied then use default
                                        language.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The last name of the agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_first_name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The first name of the agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="email_address" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        An optional email address.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="sms_address" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        An optional SMS address.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_address" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The residential address of the agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_thres" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        When the balance goes below this amount, trigger a bank cash­in (optional).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        If performing a bank cash in, request this amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lo_bal_source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Which bank account to source the funds from (format will be implementation
                                        specific).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_thres" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        When the balance goes above this amount, trigger a bank cash­out (optional).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        If performing a bank cash out, send this amount.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="hi_bal_source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Which bank account to transfer the funds to (format will be implementation
                                        specific).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent_category" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The category that this agent will belongs to (e.g. Distributor or User).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_nationality" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The nationality of this agent.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_dob" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The date of birth.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="districtid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The district of the agent, only valid for agent, mandatory.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="regionid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The region of the agent, only valid for agent, mandatory.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_alt_id_type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Identification document type: Company ID, Driver's license, NHIS, National ID, Passport, Student ID, Voter ID.
			 	    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_alt_id" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Serial number of identification document.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_reg_no" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Registration number. Optional for subscriber, mandatory for agent
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_ezwich_cardno" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        e-zwich Card Number.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_nok_name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Next of Kin Name.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_nok_no" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Next of Kin Number.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_mer_bcode" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Bank Code, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_mer_bname" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Bank Name, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_mer_baccno" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Bank Account Number, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_mer_baccname" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Bank Account Name, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ad_tigo_bank_agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Associated bank.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_latitude" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Latitude Coordinates, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_longitude" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Merchant Longitude Coordinates, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_ram_ref" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Reginal Area Manager MSISDN, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ad_ram_email" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Reginal Area Manager Email, only valid for agents.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="extra_params" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of key value pairs to store on the
                                        agent. Each extra_params entry contains a
                                        single 'key' parameter anda single 'value'
                                        parameter.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="registerResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="registerReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="bankcashout">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="bankcashoutRequest" type="tns:bankcashoutRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="bankcashoutRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The bank source to cashout to 'debit' – for debit card
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The amount of funds to cashout.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="usedefault" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Use initiators default bank settings
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Used to specify details such as the bank account
                                        number to be credited. The account detail required
                                        varies between end bank systems, so the format of
                                        this parameter can be customised to suit. The
                                        standard value is just the bank account to be
                                        credited.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="notify_alternate" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Send notification to target in this agent's notify_alternate field.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="bankcashoutResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="bankcashoutReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="finalizeExtTrans">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="finalizeExtTransRequest" type="tns:finalizeExtTransRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="finalizeExtTransRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="transid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The transaction ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        ID from trans_ext_trans.id – needed to identify ext_trans to finalize.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="ext_type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Type from trans_ext_trans.type
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="action">
                <xsd:annotation>
                  <xsd:documentation>
                                        One of the following:
                                        "COMPLETE" – flag external operation as completed.
                                        "FAIL" – flag external operation as unsuccessful/failed.
                                        "COMPLETE_ROLLBACK" – flag external operation as having last sent rollback operation succeed or unnecessary (i.e. Nothing to rollback).
                                        "FAIL_ROLLBACK" – flag external operation as having last sent rollback operation failed (i.e. Transaction is still complete).
                                        "COMMIT_AGREED" – flag external operation as commit agreed (2 phase commit).
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                  <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="complete" />
                    <xsd:enumeration value="fail" />
                    <xsd:enumeration value="commit_agreed" />
                    <xsd:enumeration value="complete_rollback" />
                    <xsd:enumeration value="fail_rollback" />
                  </xsd:restriction>
                </xsd:simpleType>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="finalizeExtTransResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="finalizeExtTransReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="lastTransactionsRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="lastTransactionsRequestType" type="tns:lastTransactionsRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="lastTransactionsRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="transCount" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                        				How many transactions you would
                        				like to receive (Max).
                        			</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent reference to retrieve the last x transactions for
                                   </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="lastTransactionsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="lastTransactionsReturn" type="tns:lastTransactionsResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="lastTransactionsResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="transactionsList" type="typedquery:TransactionSummary">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of the initiators last transactions.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAllCapSets">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAllCapSetsRequest" type="stdquery:standardQueryRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="CapSetsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="CapSetsReturn" type="tns:CapSetsResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="CapSetsResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="capsetlist" type="typedquery:CapSet">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all matching cap sets.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getCapByID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getCapByIDRequest" type="tns:getCapByIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getCapByIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="GetCapResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="CapReturn" type="tns:CapResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="CapResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="capset" type="typedquery:CapSet">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant Cap if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAllCapDetailByCapsetIdRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getAllCapDetailByCapsetIdRequestType" type="tns:getAllCapDetailByCapsetIdRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAllCapDetailByCapsetIdRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="capsetId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap set ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAllCapDetailByCapsetIdResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getAllCapDetailByCapsetIdResponseType" type="tns:getAllCapDetailByCapsetIdResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAllCapDetailByCapsetIdResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="unbounded" name="capDetailList" type="typedquery:CapDetail">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant list of cap details, if any exist.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAllCapDetails">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAllCapDetailsRequest" type="stdquery:standardQueryRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAllCapDetailsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAllCapDetailsReturn" type="tns:getAllCapDetailsResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAllCapDetailsResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="capDetailList" type="typedquery:CapDetail">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all matching cap details.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getCapDetailByID">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getCapDetailByIDRequest" type="tns:getCapDetailByIDRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getCapDetailByIDRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap detail ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getCapDetailResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="CapDetailReturn" type="tns:CapDetailResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="CapDetailResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="capdetail" type="typedquery:CapDetail">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant cap detail, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addCapSet">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addCapSetRequest" type="tns:addCapSetRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addCapSetRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Description of the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addCapSetResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addCapSetReturn" type="tns:addCapSetResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addCapSetResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The resultant Cap ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modCapSet">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modCapSetRequest" type="tns:modCapSetRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modCapSetRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="csid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The cap ID to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The new description of the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modCapSetResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modCapSetReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delCapSet">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delCapSetRequest" type="tns:delCapSetRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delCapSetRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="csid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The cap ID to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delCapSetResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delCapSetReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:simpleType name="flagsSimpleType">
        <xsd:restriction base="xsd:long">
          <xsd:enumeration id="MultiSoftThreshold" value="0">
            <xsd:annotation>
              <xsd:documentation>
                                Allow soft threshold to fire multiple times instead of once.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration id="ZeroSoftThreshold" value="1">
            <xsd:annotation>
              <xsd:documentation>
                                When soft threshold is crossed reset soft threshold tracking to 0.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:element name="addCapDetail">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addCapDetailRequest" type="tns:addCapDetailRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addCapDetailRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="csid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap Set ID to add detail for.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="capid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap Type to add. i.e. 1 = SMS.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="pattern" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The activity pattern. i.e. Like a crontab entry.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type">
                <xsd:annotation>
                  <xsd:documentation>
                                        cap update type. Values are:
                                        1) sum up transaction amounts,
                                        2) count number of transactions
                                        257) like 1 but only consider debit transactions
                                        258) like 2 but only consider debit transactions
                                        513) like 1 but only consider credit transactions
                                        514) like 2 but only consider credit transactions
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                  <xsd:restriction base="xsd:int">
                    <xsd:enumeration id="limitAllByAmount" value="1" />
                    <xsd:enumeration id="limitAllByActivity" value="2" />
                    <xsd:enumeration id="limitDebitsByAmount" value="257" />
                    <xsd:enumeration id="limitDebitsByActivity" value="258" />
                    <xsd:enumeration id="limitCreditsByAmount" value="513" />
                    <xsd:enumeration id="limitCreditsByActivity" value="514" />
                  </xsd:restriction>
                </xsd:simpleType>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="action" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule action to trigger when this cap fires or fails to fire.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="limit" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Hard limit for the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="threshold" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Soft limit for the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="flags" type="tns:flagsSimpleType">
                <xsd:annotation>
                  <xsd:documentation>
                                        Flags – bit mask of options:
                                        0x01 – Multi Soft Threshold. Allow soft threshold to fire multiple times instead
                                        of once.
                                        0x02 – Zero Soft Threshold. When soft threshold is crossed reset soft threshold
                                        tracking to 0.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addCapDetailResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addCapDetailReturn" type="tns:addCapDetailResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addCapDetailResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant cap detail ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modCapDetailRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modCapDetailRequestType" type="tns:modCapDetailRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modCapDetailRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="limit" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Hard limit for the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="flags" type="tns:flagsSimpleType">
                <xsd:annotation>
                  <xsd:documentation>
                                        Bit mask of options:
                                        1 – Multi Soft Threshold. Allow soft threshold to fire multiple times instead of once.
                                        2 – Zero Soft Threshold. When soft threshold is crossed reset soft threshold tracking to 0.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="pattern" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The activity pattern. i.e. Like a crontab entry.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="cdid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap Detail ID to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="action" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule action to trigger when this cap fires or fails to fire.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="threshold" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Soft limit for the cap.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modCapDetailResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modCapDetailReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delCapDetail">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delCapDetailRequest" type="tns:delCapDetailRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delCapDetailRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="cdid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap Detail ID to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delCapDetailResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delCapDetailReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="addRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleRequestType" type="tns:addRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="context_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Type of rule to add. Valid values are:
                                        1) Capability rule.
                                        2) Fee rule.
                                        3) Bonus rule.
                                        4) Commission rule.
                                        5) Promotion rule.
                                        6) Access control rule.
                                        7) Group access control rule.
                                        8) Auto group map rule.
                                        9) RRP.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The name of the rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleReturn" type="tns:addRuleResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The resultant rule id.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleRequestType" type="tns:modRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="rule_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The new name for the rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleRequestType" type="tns:delRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="rule_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule ID of the rule to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAllRules">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getAllRulesRequest" type="stdquery:standardQueryRequest" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAllRulesResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRulesReturn" type="tns:getAllRulesResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getAllRulesResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="ruleslist" type="typedquery:Rule">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all matching rules.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleRequestType" type="tns:getRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleReturn" type="tns:getRuleResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="rule" type="typedquery:Rule">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant rule, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="mapRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="mapRuleRequestType" type="tns:mapRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="mapRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rule_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule to map.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent group to map the rule to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="mapRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="mapRuleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="unmapRuleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="unmapRuleRequestType" type="tns:unmapRuleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="unmapRuleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rule_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule to remove from the group.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent group to remove the rule mapping from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="unmapRuleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="unmapRuleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="addRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleInstanceRequestType" type="tns:addRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Description of the instance of the rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="rule_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule id to add.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="base_rv_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        If present then use this existing rule instance ID as a basis for the newly
                                        added instance and clone this existing ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleInstanceReturn" type="tns:addRuleInstanceResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleInstanceResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant instance ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleInstanceRequestType" type="tns:modRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rv_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule version/instance ID to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        New description of the instance of the rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleInstanceReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleInstanceRequestType" type="tns:delRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rv_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule version/instance ID to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleInstanceReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="actRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="actRuleInstanceRequestType" type="tns:actRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="actRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rv_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule version (instance ID) to activate and make the new active rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="actRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="actRuleInstanceReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="deactRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deactRuleInstanceRequestType" type="tns:deactRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deactRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rule_id" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule that is to be deactivated. The currently active rule instance will be
                                        deactivated.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deactRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deactRuleInstanceReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getRuleInstanceRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleInstanceRequestType" type="tns:getRuleInstanceRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleInstanceRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule version/instance ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleInstanceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleInstanceReturn" type="tns:getRuleInstanceResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleInstanceResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleInstance" type="typedquery:RuleInstance">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant rule version/instance, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleInstanceListRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleInstanceListRequestType" type="tns:getRuleInstanceListRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleInstanceListRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleInstanceListResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleInstanceListReturn" type="tns:getRuleInstanceListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleInstanceListResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="ruleInstanceList" type="typedquery:RuleInstance">
                <xsd:annotation>
                  <xsd:documentation>
                                        List of all matching rule instances.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addRuleEntityRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleEntityRequestType" type="tns:addRuleEntityRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleEntityRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="rv_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule version this entity belongs to.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The description of the entity.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="template_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The template this rule entity is based on. Do not use in conjunction with
                                        template_ref.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="template_ref" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The template reference this rule entity is based on. Do not use in conjunction
                                        with template_id.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="parent_reid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Parent rule entity for this entity. Base entities leave this empty.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="params" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key/value pair parameters. Allowed values dependant upon the type of rule.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addRuleEntityResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addRuleEntityReturn" type="tns:addRuleEntityResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addRuleEntityResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant rule entity id.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleEntityRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleEntityRequestType" type="tns:modRuleEntityRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modRuleEntityRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="re_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule entity to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="description" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The description of the entity.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="params" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Key/value pair parameters. Allowed values are dependant
                                        upon the type of rule. Note that the Map does not
                                        completely replace the existing map, it is merged
                                        into the existing map. Items in the old map but not in
                                        the new map will not be replaced.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modRuleEntityResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="modRuleEntityReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="delRuleEntityRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleEntityRequestType" type="tns:delRuleEntityRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="delRuleEntityRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="re_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The rule entity ID of the rule entity to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="delRuleEntityResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="delRuleEntityReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getRuleEntityRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntityRequestType" type="tns:getRuleEntityRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleEntityRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule entity ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleEntityResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntityReturn" type="tns:getRuleEntityResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleEntityResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleEntity" type="typedquery:RuleEntity">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant rule entity, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleEntityListRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntityListRequestType" type="tns:getRuleEntityListRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleEntityListRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="rvid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule version/instance ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleEntityListResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntityListReturn" type="tns:getRuleEntityListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleEntityListResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="ruleEntityList" type="typedquery:RuleEntity">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all matching rule entities.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleEntitiesByParentRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntitiesByParentRequestType" type="tns:getRuleEntitiesByParentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleEntitiesByParentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="rvid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule version/instance ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="parentid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Parent rule entity ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleEntitiesByParentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleEntitiesByParentReturn" type="tns:getRuleEntityListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="moveRuleEntityUpRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="moveRuleEntityUpRequestType" type="tns:moveRuleEntityUpRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="moveRuleEntityUpRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="re_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule entity to move up.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="moveRuleEntityUpResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="moveRuleEntityUpReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="moveRuleEntityDownRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="moveRuleEntityDownRequestType" type="tns:moveRuleEntityDownRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="moveRuleEntityDownRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="re_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule entity to move down.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="moveRuleEntityDownResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="moveRuleEntityDownReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getRuleTemplateRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleTemplateRequestType" type="tns:getRuleTemplateRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleTemplateRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule template ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleTemplateResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleTemplateReturn" type="tns:getRuleTemplateResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleTemplateResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="ruleTemplate" type="typedquery:RuleTemplate">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant rule template, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleTemplateListRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleTemplateListRequestType" type="tns:getRuleTemplateListRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleTemplateListRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="contextid" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule context ID. Valid values are:
                                        1) Capability rule.
                                        2) Fee rule.
                                        3) Bonus rule.
                                        4) Commission rule.
                                        5) Promotion rule.
                                        6) Access control rule.
                                        7) Group access control rule.
                                        8) Auto group map rule.
                                        9) RRP.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleTemplateListResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getRuleTemplateListReturn" type="tns:getRuleTemplateListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleTemplateListResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="ruleTemplateList" type="typedquery:RuleTemplate">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all matching rule templates.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="createGroupRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createGroupRequestType" type="tns:createGroupRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createGroupRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group name.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group type. Valid values are
                                        0 – Normal User Group (default)
                                        1 – Unmappable System Group. Cannot be deleted. Web O+M users are not allowed to
                                        map/unmap agents out of this group.
                                        2 – Mappable System Group. Cannot be deleted. Web O+M users are permitted to
                                        map/unmap agents out of this group.
                                    </xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                  <xsd:restriction base="xsd:int">
                    <xsd:enumeration id="NormalUserGroup" value="0" />
                    <xsd:enumeration id="UnmappableSystemGroup" value="1" />
                    <xsd:enumeration id="MappableSystemGroup" value="2" />
                  </xsd:restriction>
                </xsd:simpleType>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent_category" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The category that this group will belongs to (e.g. Distributor or User).
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="createGroupResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createGroupReturn" type="tns:createGroupResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createGroupResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant group ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteGroupRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteGroupRequestType" type="tns:deleteGroupRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deleteGroupRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group ID of agent group to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteGroupResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteGroupReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="modifyGroupRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modifyGroupRequestType" type="tns:modifyGroupRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modifyGroupRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group to modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        New group name.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modifyGroupResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modifyGroupReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getGroupRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getGroupRequestType" type="tns:getGroupRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getGroupRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getGroupResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getGroupResponseType" type="tns:getGroupResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getGroupResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agentGroup" type="typedquery:AgentGroup">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant group, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="getAllGroupsRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="filter">
                <xsd:complexType>
                  <xsd:sequence>
                    <xsd:element minOccurs="1" maxOccurs="1" name="category" type="xsd:string">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    The category that this group will belongs to (e.g. Distributor or User).
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                    <xsd:element minOccurs="1" maxOccurs="1" name="includeUncategorised" type="xsd:boolean">
                      <xsd:annotation>
                        <xsd:documentation>
                                                    Whether or not to also return groups that does not belong to any category.
                                                </xsd:documentation>
                      </xsd:annotation>
                    </xsd:element>
                  </xsd:sequence>
                </xsd:complexType>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getAllGroupsRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getAllGroupsRequest" type="tns:getAllGroupsRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getAllGroupsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getAllGroupsResponseType" type="tns:getGroupListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getGroupListResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="agentGroupList" type="typedquery:AgentGroup">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of matching agent groups.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getGroupByNameRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getGroupByNameRequestType" type="tns:getGroupByNameRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getGroupByNameRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group name.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="category" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The group category. For instance: Distributor or User.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getGroupByNameResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="0" maxOccurs="1" name="agentGroup" type="typedquery:AgentGroup">
              <xsd:annotation>
                <xsd:documentation>
                                    Resultant agent group if it exists.</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getGroupsByTypeRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getGroupsByTypeRequestType" type="tns:getGroupsByTypeRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getGroupsByTypeRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Group type.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getGroupsByTypeResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getGroupsByTypeResponseType" type="tns:getGroupListResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="mapAgentRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="mapAgentRequestType" type="tns:mapAgentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="mapAgentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent group to map.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the agent to map.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="mapAgentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="mapAgentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="unmapAgentRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="unmapAgentRequestType" type="tns:unmapAgentRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="unmapAgentRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agid" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        The agent group the agent is to be removed from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the agent to remove.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="unmapAgentResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="unmapAgentReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="createVoucher">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createVoucherRequest" type="tns:createVoucherRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="createVoucherRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the provider. If not set assume provider is the logged in SOAP user.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        The value of the voucher.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="uvid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Unique identifier for the voucher.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="expiry" type="xsd:dateTime">
                <xsd:annotation>
                  <xsd:documentation>
                                        When the voucher expires.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="params" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Optional voucher parameters. Comma separated key=value pairs.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="createVoucherResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="createVoucherReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="deleteVoucher">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteVoucherRequest" type="tns:deleteVoucherRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deleteVoucherRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of the provider.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="delete_id" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        UVID of the voucher to delete.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteVoucherResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="deleteVoucherReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="resetPinRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="resetPinRequestType" type="tns:resetPinRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="resetPinRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="new_pin_type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Type of pin. 0 = default pin. Some systems will offer different pin types for
                                        different access channels.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="new_pin_encoding" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Pin type. "ldap" – LDAP based authentication. "none" – this use can access
                                        without providing authentication
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="new_pin" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        New PIN. If not set a pin will be auto generated.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Agent to reset.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="suppress_pin_expiry" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        If set to true then newly generated PIN will not be expired. If false (default)
                                        user will be forced to issue a change pin.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="resetPinResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="resetPinReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="adjustWalletRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="adjustWalletRequestType" type="tns:adjustWalletRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="adjustWalletRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Amount to adjust.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of debtor. If not present defaults to MASTER.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of creditor. If not present defaults to MASTER.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="tns:WalletType">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type. Defaults to E-Wallet. Valid types are:
                                        (1) E-Wallet.
                                        (2) Stock[Wholesale airtime].
                                        (3) Loyalty Points.
                                        (4) Stock[Retail Airtime – used for p2p share].
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="adjustWalletResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="adjustWalletReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="modifyAccountRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modifyAccountRequestType" type="tns:modifyAccountRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="modifyAccountRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="upper_limit" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Upper balance limit.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lower_limit" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Lower balance limit.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="cap_set" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Cap Set to apply to this account.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="tns:WalletType">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type. Defaults to E-Wallet. Types are:
                                        (1) E-Wallet.
                                        (2) Stock[Wholesale airtime].
                                        (3) Loyalty Points.
                                        (4) Stock[Retail Airtime – used for p2p share].
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="agent" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of agent whose wallet we will modify.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="threshold" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Notification threshold.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="modifyAccountResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="modifyAccountReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:simpleType name="WalletType">
        <xsd:restriction base="xsd:int">
          <xsd:enumeration id="E_WALLET" value="1" />
          <xsd:enumeration id="WHOLE_SALE_AIRTIME" value="2" />
          <xsd:enumeration id="LOYALTY_POINTS" value="3" />
          <xsd:enumeration id="RETAIL_AIRTIME" value="4" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:element name="sellStockRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="sellStockRequestType" type="tns:sellStockRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="sellStockRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Amount to sell.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="from" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of debtor.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        MSISDN of creditor.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="purchase_order" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Purchase order number. If present must be unique.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="money" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wholesale price of the amount sold.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="commission_id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Commission Context Rule that will apply for this batch of stock injected into
                                        the system.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="params" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        A comma separated list (no white spaces padding allowed) of key value pairs.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="sellStockResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="sellStockReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="dispenseVoucher">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="dispenseVoucherRequest" type="tns:dispenseVoucherRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="dispenseVoucherRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The voucher provider to get a voucher from.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type to use to pay for the voucher. Default is E-Wallet.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Voucher value to buy.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="recipient" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The recipient of the voucher. Send sms notification to them.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="dispenseVoucherResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="dispenseVoucherReturn" type="tns:dispenseVoucherResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="dispenseVoucherResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="uvid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant voucher ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="expiryDate" type="xsd:dateTime">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant dispensed voucher exipry date.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="dispenseParams" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Resultant dispense voucher params.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getVoucherRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getVoucherRequestType" type="tns:getVoucherRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getVoucherRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="uvid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Voucher ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
            <xsd:attribute fixed="false" name="lock" type="xsd:boolean">
              <xsd:annotation>
                <xsd:documentation>
                                    Fixes as false. Do not modify.
                                </xsd:documentation>
              </xsd:annotation>
            </xsd:attribute>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getVoucherResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="getVoucherReturn" type="tns:getVoucherResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getVoucherResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="aVoucher" type="typedquery:Voucher">
                <xsd:annotation>
                  <xsd:documentation>
                                        The resultant voucher, if it exists.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addScheduleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="addScheduleRequestType" type="tns:addScheduleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addScheduleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="command" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The command to perform.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="pattern" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        The schedule pattern. i.e. Crontab entry.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="count" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        0 = infinite, 1 = once only (default), n = n times
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lookup_type" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Useful for identifying/keying the schedule for later lookup.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="lookup_key" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Useful for identifying/keying the schedule for later lookup.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="params" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                        Map of parameters to pass. Depends on biz function.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="addScheduleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="addScheduleReturn" type="tns:addScheduleResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="addScheduleResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Schedule ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteScheduleRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="deleteScheduleRequestType" type="tns:deleteScheduleRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="deleteScheduleRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="id" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>
                                        Schedule ID for deletion.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="deleteScheduleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="deleteScheduleReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getRuleListByContextIdRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getRuleListByContextIdRequestType" type="tns:getRuleListByContextIdRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleListByContextIdRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="context" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Rule context ID. Valid values are:
                                        1) Capability rule.
                                        2) Fee rule.
                                        3) Bonus rule.
                                        4) Commission rule.
                                        5) Promotion rule.
                                        6) Access control rule.
                                        7) Group access control rule.
                                        8) Auto group map rule.
                                        9) RRP.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getRuleListByContextIdResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getRuleListByContextIdResponseType" type="tns:getRuleListByContextIdResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getRuleListByContextIdResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="unbounded" name="rulesList" type="typedquery:Rule">
                <xsd:annotation>
                  <xsd:documentation>
                                        A list of all the matching rules.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="coupontransfer">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="coupontransferRequestType" type="tns:coupontransferRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="coupontransferRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="amount" type="xsd:decimal">
                <xsd:annotation>
                  <xsd:documentation>
                                        Amount to take from the coupon
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="type" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        Wallet type ID.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                		Coupon ID of the coupon to source funds from.
                                </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="coupontransferResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="coupontransferReturn" type="tns:standardBizResponse" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="invokeRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="invokeRequestType" type="tns:invokeRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="invokeRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="function_name" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                      The name of the function to invoke on the end-point.
                                  </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="parameters" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                    Parameters to pass to the function invoked on the end-point.
                                </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="target" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                  The agent reference of the end-point in the U:Market system.
                                </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="invokeResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="invokeResponse" type="tns:invokeResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="invokeResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="invoke_success" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                      The result of the invocation. Success is denoted by a true value.
                                      Note that this should not be confused with UMarket's result value.
                                  </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="1" maxOccurs="1" name="incoming" type="tns:KeyValuePairMap">
                <xsd:annotation>
                  <xsd:documentation>
                                      The parameters returned by the end-point.
                                  </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getChildListByReferenceIDRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getChildListByReferenceIDRequestType" type="tns:getChildListByReferenceIDRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getChildListByReferenceIDRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agentReferenceID" type="xsd:long" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getChildListByReferenceIDResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getChildListByReferenceIDResponseType" type="tns:getChildListByReferenceIDResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getChildListByReferenceIDResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="agentList" type="typedquery:Agent" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getParentListByReferenceIDRequest">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getParentListByReferenceIDRequestType" type="tns:getParentListByReferenceIDRequestType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getParentListByReferenceIDRequestType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardQueryRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="agentReferenceID" type="xsd:long" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="getParentListByReferenceIDResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="getParentListByReferenceIDResponseType" type="tns:getParentListByReferenceIDResponseType" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="getParentListByReferenceIDResponseType">
        <xsd:complexContent mixed="false">
          <xsd:extension base="tns:standardBizResponse">
            <xsd:sequence>
              <xsd:element minOccurs="0" maxOccurs="unbounded" name="agentList" type="typedquery:Agent" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="standardBizRequest">
        <xsd:complexContent mixed="false">
          <xsd:extension base="stdquery:standardRequest">
            <xsd:sequence>
              <xsd:element minOccurs="1" maxOccurs="1" name="sessionid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        A valid session id (for most functions you will have to login)
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="wait" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Some commands require interaction with external
                                        systems or external user i.e. To perform a bank
                                        operation or to wait for confirmation. By default a
                                        SOAP request will wait for all external transactions
                                        to complete before returning success. SOAP will
                                        wait for external systems like banks and users to
                                        contribute to the transaction.
                                        If a SOAP response to only indicate initial
                                        acceptance of the transaction is required then the
                                        wait parameter can be set to false. When this is
                                        done, and the response from soap is success (0),
                                        this only means that the transaction was successful
                                        so far and that an external entity such as a banking
                                        platform may still cause the transaction to fail.
                                        In order to have SOAP return immediately without
                                        waiting for external parties, set the wait parameter
                                        to false.
                                        By default wait is assumed to be true.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="schedule" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Schedule this transaction to run at the specified
                                        time. Refer to Appendix A of the Functional
                                        Specification for valid values for schedule. Note
                                        that is schedule is set then the wait parameter will
                                        have no effect.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="schedfreq" type="xsd:int">
                <xsd:annotation>
                  <xsd:documentation>
                                        The frequency for the schedule. 1 means run the
                                        schedule once only. N means run the schedule n
                                        times. If not specified the schedule is set to run
                                        indefinently – until it is explicitly deleted or the
                                        underlying function that is requested fails 3
                                        consecutive times.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_usedefault" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        For debit E­Wallet transactions – source the funds
                                        from an external bank.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_source" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        For debit E­Wallet transactions – source the funds
                                        from an external system such as a bank.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_details" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        For debit E­Wallet transactions – source details –
                                        like a bank account number etc.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_src_method" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Used for coupon­funded transactions, the
                                        parameter value should be set to 'couponsource'.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="ext_couponid" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                Coupon ID of the coupon to source funds from.
                                </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="suppress_confirm" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Suppress confirmation.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="suppress_notify_trans" type="xsd:boolean">
                <xsd:annotation>
                  <xsd:documentation>
                                        Suppress notification trans.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element minOccurs="0" maxOccurs="1" name="trans_ext_reference" type="xsd:string">
                <xsd:annotation>
                  <xsd:documentation>
                                        Client supplied reference for the request.
                                    </xsd:documentation>
                </xsd:annotation>
              </xsd:element>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="standardBizResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="1" name="transid" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>
                                For Biz type functions – transid represents the ID that
                                the request was submitted to the core upon.
                                For new transactions, transactions that were initiated
                                by the soap call, the transid returned will represent
                                the transaction id that is used to track the actual
                                transaction request. This id can be supplied to query
                                command to query the state of the transaction and
                                will be yielded by reports that report on transactions.
                                For existing transactions, such as transactions
                                accessed via the confirm command, the transid
                                returned has little value to the SOAP client and is only
                                meaningful for systems tracing. The transid provided
                                as part of the request is the id that is meaningful for
                                transaction tracing purposes.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="schedule_id" type="xsd:long">
            <xsd:annotation>
              <xsd:documentation>
                                If you request a biz function to be scheduled this
                                parameter will yield an ID number that is used to track
                                the schedule job. You pass this number through the
                                delschedule function to delete a schedule later.
                                Note that this number is different to the transid. For a
                                scheduled transaction – the transid will represent a
                                add_schedule function – the act of requesting a
                                schedule. It does not represent the schedule itself
                                (schedule_id does this). Nor does it represent the
                                transid of the transaction when it is run by the
                                scheduler.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="result" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>
                                The result code represents the actual outcome of the request. A result of 0
                                represents success. Non zero values represent failure. See Appendix A for
                                complete list of possible result codes.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="result_namespace" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                Represents a string. It can be one of the following values:
                                'soap' - a soap based result
                                'session' – a session based result
                                'core' – a result generated by the biz component
                                'umarket' – a result generated by the biz component
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="fee" type="xsd:decimal">
            <xsd:annotation>
              <xsd:documentation>
                                For transaction based operations this parameter will
                                report any fees collected from the initiating party in
                                the transaction.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="trans_ext_reference" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
                                Client supplied reference for the request.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getAllAgentGroups">
    <wsdl:part name="parameters" element="tns:getAllAgentGroups" />
  </wsdl:message>
  <wsdl:message name="getAgentGroupByAgentID">
    <wsdl:part name="parameters" element="tns:getAgentGroupByAgentID" />
  </wsdl:message>
  <wsdl:message name="AgentGroupsResponse">
    <wsdl:part name="AgentGroupsResponse" element="tns:AgentGroupsResponse" />
  </wsdl:message>
  <wsdl:message name="getAgentByReference">
    <wsdl:part name="parameters" element="tns:getAgentByReference" />
  </wsdl:message>
  <wsdl:message name="getAgentByReferenceID">
    <wsdl:part name="parameters" element="tns:getAgentByReferenceID" />
  </wsdl:message>
  <wsdl:message name="AgentResponse">
    <wsdl:part name="AgentResponse" element="tns:AgentResponse" />
  </wsdl:message>
  <wsdl:message name="getAccountByReferenceID">
    <wsdl:part name="parameters" element="tns:getAccountByReferenceID" />
  </wsdl:message>
  <wsdl:message name="getAccountByReferenceIDAndType">
    <wsdl:part name="parameters" element="tns:getAccountByReferenceIDAndType" />
  </wsdl:message>
  <wsdl:message name="AccountsResponse">
    <wsdl:part name="AccountsResponse" element="tns:AccountsResponse" />
  </wsdl:message>
  <wsdl:message name="AccountResponse">
    <wsdl:part name="AccountResponse" element="tns:AccountResponse" />
  </wsdl:message>
  <wsdl:message name="getTransactionByID">
    <wsdl:part name="parameters" element="tns:getTransactionByID" />
  </wsdl:message>
  <wsdl:message name="TransactionResponse">
    <wsdl:part name="TransactionResponse" element="tns:TransactionResponse" />
  </wsdl:message>
  <wsdl:message name="pin">
    <wsdl:part name="parameters" element="tns:pin" />
  </wsdl:message>
  <wsdl:message name="pinResponse">
    <wsdl:part name="pinResponse" element="tns:pinResponse" />
  </wsdl:message>
  <wsdl:message name="sales">
    <wsdl:part name="parameters" element="tns:sales" />
  </wsdl:message>
  <wsdl:message name="createcoupon">
    <wsdl:part name="parameters" element="tns:createcoupon" />
  </wsdl:message>
  <wsdl:message name="salesResponse">
    <wsdl:part name="salesResponse" element="tns:salesResponse" />
  </wsdl:message>
  <wsdl:message name="createcouponResponse">
    <wsdl:part name="createcouponResponse" element="tns:createcouponResponse" />
  </wsdl:message>
  <wsdl:message name="payment_createcoupon">
    <wsdl:part name="parameters" element="tns:payment_createcoupon" />
  </wsdl:message>
  <wsdl:message name="payment_createcouponResponse">
    <wsdl:part name="payment_createcouponResponse" element="tns:payment_createcouponResponse" />
  </wsdl:message>
  <wsdl:message name="activate">
    <wsdl:part name="parameters" element="tns:activate" />
  </wsdl:message>
  <wsdl:message name="activateResponse">
    <wsdl:part name="activateResponse" element="tns:activateResponse" />
  </wsdl:message>
  <wsdl:message name="sell">
    <wsdl:part name="parameters" element="tns:sell" />
  </wsdl:message>
  <wsdl:message name="sellResponse">
    <wsdl:part name="sellResponse" element="tns:sellResponse" />
  </wsdl:message>
  <wsdl:message name="buy">
    <wsdl:part name="parameters" element="tns:buy" />
  </wsdl:message>
  <wsdl:message name="buyResponse">
    <wsdl:part name="buyResponse" element="tns:buyResponse" />
  </wsdl:message>
  <wsdl:message name="donate">
    <wsdl:part name="parameters" element="tns:donate" />
  </wsdl:message>
  <wsdl:message name="donateResponse">
    <wsdl:part name="donateResponse" element="tns:donateResponse" />
  </wsdl:message>
  <wsdl:message name="authorise">
    <wsdl:part name="parameters" element="tns:authorise" />
  </wsdl:message>
  <wsdl:message name="authoriseResponse">
    <wsdl:part name="authoriseResponse" element="tns:authoriseResponse" />
  </wsdl:message>
  <wsdl:message name="authorise2">
    <wsdl:part name="parameters" element="tns:authorise2" />
  </wsdl:message>
  <wsdl:message name="authorise2Response">
    <wsdl:part name="authorise2Response" element="tns:authorise2Response" />
  </wsdl:message>
  <wsdl:message name="reverse">
    <wsdl:part name="parameters" element="tns:reverse" />
  </wsdl:message>
  <wsdl:message name="reverseResponse">
    <wsdl:part name="reverseResponse" element="tns:reverseResponse" />
  </wsdl:message>
  <wsdl:message name="login">
    <wsdl:part name="parameters" element="tns:login" />
  </wsdl:message>
  <wsdl:message name="loginResponse">
    <wsdl:part name="loginResponse" element="tns:loginResponse" />
  </wsdl:message>
  <wsdl:message name="balance">
    <wsdl:part name="parameters" element="tns:balance" />
  </wsdl:message>
  <wsdl:message name="balanceResponse">
    <wsdl:part name="balanceResponse" element="tns:balanceResponse" />
  </wsdl:message>
  <wsdl:message name="viewContact">
    <wsdl:part name="parameters" element="tns:viewContact" />
  </wsdl:message>
  <wsdl:message name="viewContactResponse">
    <wsdl:part name="viewContactResponse" element="tns:viewContactResponse" />
  </wsdl:message>
  <wsdl:message name="addContact">
    <wsdl:part name="parameters" element="tns:addContact" />
  </wsdl:message>
  <wsdl:message name="addContactResponse">
    <wsdl:part name="addContactResponse" element="tns:addContactResponse" />
  </wsdl:message>
  <wsdl:message name="modifyContact">
    <wsdl:part name="parameters" element="tns:modifyContact" />
  </wsdl:message>
  <wsdl:message name="modifyContactResponse">
    <wsdl:part name="modifyContactResponse" element="tns:modifyContactResponse" />
  </wsdl:message>
  <wsdl:message name="deleteContact">
    <wsdl:part name="parameters" element="tns:deleteContact" />
  </wsdl:message>
  <wsdl:message name="deleteContactResponse">
    <wsdl:part name="deleteContactResponse" element="tns:deleteContactResponse" />
  </wsdl:message>
  <wsdl:message name="delete">
    <wsdl:part name="parameters" element="tns:delete" />
  </wsdl:message>
  <wsdl:message name="deleteResponse">
    <wsdl:part name="deleteResponse" element="tns:deleteResponse" />
  </wsdl:message>
  <wsdl:message name="createsession">
    <wsdl:part name="parameters" element="tns:createsession" />
  </wsdl:message>
  <wsdl:message name="createsessionResponse">
    <wsdl:part name="createsessionResponse" element="tns:createsessionResponse" />
  </wsdl:message>
  <wsdl:message name="delschedule">
    <wsdl:part name="parameters" element="tns:delschedule" />
  </wsdl:message>
  <wsdl:message name="delscheduleResponse">
    <wsdl:part name="delscheduleResponse" element="tns:delscheduleResponse" />
  </wsdl:message>
  <wsdl:message name="transquery">
    <wsdl:part name="parameters" element="tns:transquery" />
  </wsdl:message>
  <wsdl:message name="transqueryResponse">
    <wsdl:part name="transqueryResponse" element="tns:transqueryResponse" />
  </wsdl:message>
  <wsdl:message name="transqueryext">
    <wsdl:part name="parameters" element="tns:transqueryext" />
  </wsdl:message>
  <wsdl:message name="transqueryextResponse">
    <wsdl:part name="transqueryextResponse" element="tns:transqueryextResponse" />
  </wsdl:message>
  <wsdl:message name="nextid">
    <wsdl:part name="parameters" element="tns:nextid" />
  </wsdl:message>
  <wsdl:message name="nextidResponse">
    <wsdl:part name="nextidResponse" element="tns:nextidResponse" />
  </wsdl:message>
  <wsdl:message name="deactivate">
    <wsdl:part name="parameters" element="tns:deactivate" />
  </wsdl:message>
  <wsdl:message name="deactivateResponse">
    <wsdl:part name="deactivateResponse" element="tns:deactivateResponse" />
  </wsdl:message>
  <wsdl:message name="bankcashin">
    <wsdl:part name="parameters" element="tns:bankcashin" />
  </wsdl:message>
  <wsdl:message name="bankcashinResponse">
    <wsdl:part name="bankcashinResponse" element="tns:bankcashinResponse" />
  </wsdl:message>
  <wsdl:message name="confirm">
    <wsdl:part name="parameters" element="tns:confirm" />
  </wsdl:message>
  <wsdl:message name="confirmResponse">
    <wsdl:part name="confirmResponse" element="tns:confirmResponse" />
  </wsdl:message>
  <wsdl:message name="delchild">
    <wsdl:part name="parameters" element="tns:delchild" />
  </wsdl:message>
  <wsdl:message name="delchildResponse">
    <wsdl:part name="delchildResponse" element="tns:delchildResponse" />
  </wsdl:message>
  <wsdl:message name="transfer">
    <wsdl:part name="parameters" element="tns:transfer" />
  </wsdl:message>
  <wsdl:message name="transferResponse">
    <wsdl:part name="transferResponse" element="tns:transferResponse" />
  </wsdl:message>
  <wsdl:message name="payment">
    <wsdl:part name="parameters" element="tns:payment" />
  </wsdl:message>
  <wsdl:message name="paymentResponse">
    <wsdl:part name="paymentResponse" element="tns:paymentResponse" />
  </wsdl:message>
  <wsdl:message name="a2atransfer">
    <wsdl:part name="parameters" element="tns:a2atransfer" />
  </wsdl:message>
  <wsdl:message name="a2atransferResponse">
    <wsdl:part name="a2atransferResponse" element="tns:a2atransferResponse" />
  </wsdl:message>
  <wsdl:message name="delparent">
    <wsdl:part name="parameters" element="tns:delparent" />
  </wsdl:message>
  <wsdl:message name="delparentResponse">
    <wsdl:part name="delparentResponse" element="tns:delparentResponse" />
  </wsdl:message>
  <wsdl:message name="modify">
    <wsdl:part name="parameters" element="tns:modify" />
  </wsdl:message>
  <wsdl:message name="modifyResponse">
    <wsdl:part name="modifyResponse" element="tns:modifyResponse" />
  </wsdl:message>
  <wsdl:message name="billpaycompany">
    <wsdl:part name="parameters" element="tns:billpaycompany" />
  </wsdl:message>
  <wsdl:message name="billpaycompanyResponse">
    <wsdl:part name="billpaycompanyResponse" element="tns:billpaycompanyResponse" />
  </wsdl:message>
  <wsdl:message name="billpay">
    <wsdl:part name="parameters" element="tns:billpay" />
  </wsdl:message>
  <wsdl:message name="billpayResponse">
    <wsdl:part name="billpayResponse" element="tns:billpayResponse" />
  </wsdl:message>
  <wsdl:message name="joinparent">
    <wsdl:part name="parameters" element="tns:joinparent" />
  </wsdl:message>
  <wsdl:message name="joinparentResponse">
    <wsdl:part name="joinparentResponse" element="tns:joinparentResponse" />
  </wsdl:message>
  <wsdl:message name="changeparent">
    <wsdl:part name="parameters" element="tns:changeparent" />
  </wsdl:message>
  <wsdl:message name="changeparentResponse">
    <wsdl:part name="changeparentResponse" element="tns:changeparentResponse" />
  </wsdl:message>
  <wsdl:message name="link">
    <wsdl:part name="parameters" element="tns:link" />
  </wsdl:message>
  <wsdl:message name="linkResponse">
    <wsdl:part name="linkResponse" element="tns:linkResponse" />
  </wsdl:message>
  <wsdl:message name="stop">
    <wsdl:part name="parameters" element="tns:stop" />
  </wsdl:message>
  <wsdl:message name="stopResponse">
    <wsdl:part name="stopResponse" element="tns:stopResponse" />
  </wsdl:message>
  <wsdl:message name="joinchild">
    <wsdl:part name="parameters" element="tns:joinchild" />
  </wsdl:message>
  <wsdl:message name="joinchildResponse">
    <wsdl:part name="joinchildResponse" element="tns:joinchildResponse" />
  </wsdl:message>
  <wsdl:message name="query">
    <wsdl:part name="parameters" element="tns:query" />
  </wsdl:message>
  <wsdl:message name="queryResponse">
    <wsdl:part name="queryResponse" element="tns:queryResponse" />
  </wsdl:message>
  <wsdl:message name="billcollect">
    <wsdl:part name="parameters" element="tns:billcollect" />
  </wsdl:message>
  <wsdl:message name="billcollectResponse">
    <wsdl:part name="billcollectResponse" element="tns:billcollectResponse" />
  </wsdl:message>
  <wsdl:message name="register">
    <wsdl:part name="parameters" element="tns:register" />
  </wsdl:message>
  <wsdl:message name="registerResponse">
    <wsdl:part name="registerResponse" element="tns:registerResponse" />
  </wsdl:message>
  <wsdl:message name="bankcashout">
    <wsdl:part name="parameters" element="tns:bankcashout" />
  </wsdl:message>
  <wsdl:message name="bankcashoutResponse">
    <wsdl:part name="bankcashoutResponse" element="tns:bankcashoutResponse" />
  </wsdl:message>
  <wsdl:message name="finalizeExtTrans">
    <wsdl:part name="parameters" element="tns:finalizeExtTrans" />
  </wsdl:message>
  <wsdl:message name="finalizeExtTransResponse">
    <wsdl:part name="finalizeExtTransResponse" element="tns:finalizeExtTransResponse" />
  </wsdl:message>
  <wsdl:message name="lastTransactionsRequest">
    <wsdl:part name="parameters" element="tns:lastTransactionsRequest" />
  </wsdl:message>
  <wsdl:message name="lastTransactionsResponse">
    <wsdl:part name="lastTransactionsResponse" element="tns:lastTransactionsResponse" />
  </wsdl:message>
  <wsdl:message name="getAllCapSets">
    <wsdl:part name="parameters" element="tns:getAllCapSets" />
  </wsdl:message>
  <wsdl:message name="CapSetsResponse">
    <wsdl:part name="CapSetsResponse" element="tns:CapSetsResponse" />
  </wsdl:message>
  <wsdl:message name="getCapByID">
    <wsdl:part name="parameters" element="tns:getCapByID" />
  </wsdl:message>
  <wsdl:message name="GetCapResponse">
    <wsdl:part name="GetCapResponse" element="tns:GetCapResponse" />
  </wsdl:message>
  <wsdl:message name="getAllCapDetails">
    <wsdl:part name="parameters" element="tns:getAllCapDetails" />
  </wsdl:message>
  <wsdl:message name="getAllCapDetailsResponse">
    <wsdl:part name="getAllCapDetailsResponse" element="tns:getAllCapDetailsResponse" />
  </wsdl:message>
  <wsdl:message name="getAllCapDetailByCapsetIdRequest">
    <wsdl:part name="parameters" element="tns:getAllCapDetailByCapsetIdRequest" />
  </wsdl:message>
  <wsdl:message name="getAllCapDetailByCapsetIdResponse">
    <wsdl:part name="getAllCapDetailByCapsetIdResponse" element="tns:getAllCapDetailByCapsetIdResponse" />
  </wsdl:message>
  <wsdl:message name="getCapDetailByID">
    <wsdl:part name="parameters" element="tns:getCapDetailByID" />
  </wsdl:message>
  <wsdl:message name="getCapDetailResponse">
    <wsdl:part name="getCapDetailResponse" element="tns:getCapDetailResponse" />
  </wsdl:message>
  <wsdl:message name="addCapSet">
    <wsdl:part name="parameters" element="tns:addCapSet" />
  </wsdl:message>
  <wsdl:message name="addCapSetResponse">
    <wsdl:part name="addCapSetResponse" element="tns:addCapSetResponse" />
  </wsdl:message>
  <wsdl:message name="modCapSet">
    <wsdl:part name="parameters" element="tns:modCapSet" />
  </wsdl:message>
  <wsdl:message name="modCapSetResponse">
    <wsdl:part name="modCapSetResponse" element="tns:modCapSetResponse" />
  </wsdl:message>
  <wsdl:message name="delCapSet">
    <wsdl:part name="parameters" element="tns:delCapSet" />
  </wsdl:message>
  <wsdl:message name="delCapSetResponse">
    <wsdl:part name="delCapSetResponse" element="tns:delCapSetResponse" />
  </wsdl:message>
  <wsdl:message name="addCapDetail">
    <wsdl:part name="parameters" element="tns:addCapDetail" />
  </wsdl:message>
  <wsdl:message name="addCapDetailResponse">
    <wsdl:part name="addCapDetailResponse" element="tns:addCapDetailResponse" />
  </wsdl:message>
  <wsdl:message name="modCapDetailRequest">
    <wsdl:part name="parameters" element="tns:modCapDetailRequest" />
  </wsdl:message>
  <wsdl:message name="modCapDetailResponse">
    <wsdl:part name="modCapDetailResponse" element="tns:modCapDetailResponse" />
  </wsdl:message>
  <wsdl:message name="delCapDetail">
    <wsdl:part name="parameters" element="tns:delCapDetail" />
  </wsdl:message>
  <wsdl:message name="delCapDetailResponse">
    <wsdl:part name="delCapDetailResponse" element="tns:delCapDetailResponse" />
  </wsdl:message>
  <wsdl:message name="addRuleRequest">
    <wsdl:part name="parameters" element="tns:addRuleRequest" />
  </wsdl:message>
  <wsdl:message name="addRuleResponse">
    <wsdl:part name="addRuleResponse" element="tns:addRuleResponse" />
  </wsdl:message>
  <wsdl:message name="modRuleRequest">
    <wsdl:part name="parameters" element="tns:modRuleRequest" />
  </wsdl:message>
  <wsdl:message name="modRuleResponse">
    <wsdl:part name="modRuleResponse" element="tns:modRuleResponse" />
  </wsdl:message>
  <wsdl:message name="delRuleRequest">
    <wsdl:part name="parameters" element="tns:delRuleRequest" />
  </wsdl:message>
  <wsdl:message name="delRuleResponse">
    <wsdl:part name="delRuleResponse" element="tns:delRuleResponse" />
  </wsdl:message>
  <wsdl:message name="getAllRules">
    <wsdl:part name="parameters" element="tns:getAllRules" />
  </wsdl:message>
  <wsdl:message name="getAllRulesResponse">
    <wsdl:part name="getAllRulesResponse" element="tns:getAllRulesResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleRequest">
    <wsdl:part name="parameters" element="tns:getRuleRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleResponse">
    <wsdl:part name="getRuleResponse" element="tns:getRuleResponse" />
  </wsdl:message>
  <wsdl:message name="mapRuleRequest">
    <wsdl:part name="parameters" element="tns:mapRuleRequest" />
  </wsdl:message>
  <wsdl:message name="mapRuleResponse">
    <wsdl:part name="mapRuleResponse" element="tns:mapRuleResponse" />
  </wsdl:message>
  <wsdl:message name="unmapRuleRequest">
    <wsdl:part name="parameters" element="tns:unmapRuleRequest" />
  </wsdl:message>
  <wsdl:message name="unmapRuleResponse">
    <wsdl:part name="unmapRuleResponse" element="tns:unmapRuleResponse" />
  </wsdl:message>
  <wsdl:message name="addRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:addRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="addRuleInstanceResponse">
    <wsdl:part name="addRuleInstanceResponse" element="tns:addRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="modRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:modRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="modRuleInstanceResponse">
    <wsdl:part name="modRuleInstanceResponse" element="tns:modRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="delRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:delRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="delRuleInstanceResponse">
    <wsdl:part name="delRuleInstanceResponse" element="tns:delRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="actRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:actRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="actRuleInstanceResponse">
    <wsdl:part name="actRuleInstanceResponse" element="tns:actRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="deactRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:deactRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="deactRuleInstanceResponse">
    <wsdl:part name="deactRuleInstanceResponse" element="tns:deactRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleInstanceRequest">
    <wsdl:part name="parameters" element="tns:getRuleInstanceRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleInstanceResponse">
    <wsdl:part name="getRuleInstanceResponse" element="tns:getRuleInstanceResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleInstanceListRequest">
    <wsdl:part name="parameters" element="tns:getRuleInstanceListRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleInstanceListResponse">
    <wsdl:part name="getRuleInstanceListResponse" element="tns:getRuleInstanceListResponse" />
  </wsdl:message>
  <wsdl:message name="addRuleEntityRequest">
    <wsdl:part name="parameters" element="tns:addRuleEntityRequest" />
  </wsdl:message>
  <wsdl:message name="addRuleEntityResponse">
    <wsdl:part name="addRuleEntityResponse" element="tns:addRuleEntityResponse" />
  </wsdl:message>
  <wsdl:message name="modRuleEntityRequest">
    <wsdl:part name="parameters" element="tns:modRuleEntityRequest" />
  </wsdl:message>
  <wsdl:message name="modRuleEntityResponse">
    <wsdl:part name="modRuleEntityResponse" element="tns:modRuleEntityResponse" />
  </wsdl:message>
  <wsdl:message name="delRuleEntityRequest">
    <wsdl:part name="parameters" element="tns:delRuleEntityRequest" />
  </wsdl:message>
  <wsdl:message name="delRuleEntityResponse">
    <wsdl:part name="delRuleEntityResponse" element="tns:delRuleEntityResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleEntityRequest">
    <wsdl:part name="parameters" element="tns:getRuleEntityRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleEntityResponse">
    <wsdl:part name="getRuleEntityResponse" element="tns:getRuleEntityResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleEntityListRequest">
    <wsdl:part name="parameters" element="tns:getRuleEntityListRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleEntityListResponse">
    <wsdl:part name="getRuleEntityListResponse" element="tns:getRuleEntityListResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleEntitiesByParentRequest">
    <wsdl:part name="parameters" element="tns:getRuleEntitiesByParentRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleEntitiesByParentResponse">
    <wsdl:part name="getRuleEntitiesByParentResponse" element="tns:getRuleEntitiesByParentResponse" />
  </wsdl:message>
  <wsdl:message name="moveRuleEntityUpRequest">
    <wsdl:part name="parameters" element="tns:moveRuleEntityUpRequest" />
  </wsdl:message>
  <wsdl:message name="moveRuleEntityUpResponse">
    <wsdl:part name="moveRuleEntityUpResponse" element="tns:moveRuleEntityUpResponse" />
  </wsdl:message>
  <wsdl:message name="moveRuleEntityDownRequest">
    <wsdl:part name="parameters" element="tns:moveRuleEntityDownRequest" />
  </wsdl:message>
  <wsdl:message name="moveRuleEntityDownResponse">
    <wsdl:part name="moveRuleEntityDownResponse" element="tns:moveRuleEntityDownResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleTemplateRequest">
    <wsdl:part name="parameters" element="tns:getRuleTemplateRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleTemplateResponse">
    <wsdl:part name="getRuleTemplateResponse" element="tns:getRuleTemplateResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleTemplateListRequest">
    <wsdl:part name="parameters" element="tns:getRuleTemplateListRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleTemplateListResponse">
    <wsdl:part name="getRuleTemplateListResponse" element="tns:getRuleTemplateListResponse" />
  </wsdl:message>
  <wsdl:message name="createGroupRequest">
    <wsdl:part name="parameters" element="tns:createGroupRequest" />
  </wsdl:message>
  <wsdl:message name="createGroupResponse">
    <wsdl:part name="createGroupResponse" element="tns:createGroupResponse" />
  </wsdl:message>
  <wsdl:message name="deleteGroupRequest">
    <wsdl:part name="parameters" element="tns:deleteGroupRequest" />
  </wsdl:message>
  <wsdl:message name="deleteGroupResponse">
    <wsdl:part name="deleteGroupResponse" element="tns:deleteGroupResponse" />
  </wsdl:message>
  <wsdl:message name="modifyGroupRequest">
    <wsdl:part name="parameters" element="tns:modifyGroupRequest" />
  </wsdl:message>
  <wsdl:message name="modifyGroupResponse">
    <wsdl:part name="modifyGroupResponse" element="tns:modifyGroupResponse" />
  </wsdl:message>
  <wsdl:message name="getGroupRequest">
    <wsdl:part name="parameters" element="tns:getGroupRequest" />
  </wsdl:message>
  <wsdl:message name="getGroupResponse">
    <wsdl:part name="getGroupResponse" element="tns:getGroupResponse" />
  </wsdl:message>
  <wsdl:message name="getAllGroupsRequest">
    <wsdl:part name="parameters" element="tns:getAllGroupsRequest" />
  </wsdl:message>
  <wsdl:message name="getAllGroupsResponse">
    <wsdl:part name="getAllGroupsResponse" element="tns:getAllGroupsResponse" />
  </wsdl:message>
  <wsdl:message name="getGroupByNameRequest">
    <wsdl:part name="parameters" element="tns:getGroupByNameRequest" />
  </wsdl:message>
  <wsdl:message name="getGroupByNameResponse">
    <wsdl:part name="getGroupByNameResponse" element="tns:getGroupByNameResponse" />
  </wsdl:message>
  <wsdl:message name="getGroupsByTypeRequest">
    <wsdl:part name="parameters" element="tns:getGroupsByTypeRequest" />
  </wsdl:message>
  <wsdl:message name="getGroupsByTypeResponse">
    <wsdl:part name="getGroupsByTypeResponse" element="tns:getGroupsByTypeResponse" />
  </wsdl:message>
  <wsdl:message name="mapAgentRequest">
    <wsdl:part name="parameters" element="tns:mapAgentRequest" />
  </wsdl:message>
  <wsdl:message name="mapAgentResponse">
    <wsdl:part name="mapAgentResponse" element="tns:mapAgentResponse" />
  </wsdl:message>
  <wsdl:message name="unmapAgentRequest">
    <wsdl:part name="parameters" element="tns:unmapAgentRequest" />
  </wsdl:message>
  <wsdl:message name="unmapAgentResponse">
    <wsdl:part name="unmapAgentResponse" element="tns:unmapAgentResponse" />
  </wsdl:message>
  <wsdl:message name="createVoucher">
    <wsdl:part name="parameters" element="tns:createVoucher" />
  </wsdl:message>
  <wsdl:message name="createVoucherResponse">
    <wsdl:part name="createVoucherResponse" element="tns:createVoucherResponse" />
  </wsdl:message>
  <wsdl:message name="deleteVoucher">
    <wsdl:part name="parameters" element="tns:deleteVoucher" />
  </wsdl:message>
  <wsdl:message name="deleteVoucherResponse">
    <wsdl:part name="deleteVoucherResponse" element="tns:deleteVoucherResponse" />
  </wsdl:message>
  <wsdl:message name="resetPinRequest">
    <wsdl:part name="parameters" element="tns:resetPinRequest" />
  </wsdl:message>
  <wsdl:message name="resetPinResponse">
    <wsdl:part name="resetPinResponse" element="tns:resetPinResponse" />
  </wsdl:message>
  <wsdl:message name="adjustWalletRequest">
    <wsdl:part name="parameters" element="tns:adjustWalletRequest" />
  </wsdl:message>
  <wsdl:message name="adjustWalletResponse">
    <wsdl:part name="adjustWalletResponse" element="tns:adjustWalletResponse" />
  </wsdl:message>
  <wsdl:message name="modifyAccountRequest">
    <wsdl:part name="parameters" element="tns:modifyAccountRequest" />
  </wsdl:message>
  <wsdl:message name="modifyAccountResponse">
    <wsdl:part name="modifyAccountResponse" element="tns:modifyAccountResponse" />
  </wsdl:message>
  <wsdl:message name="sellStockRequest">
    <wsdl:part name="parameters" element="tns:sellStockRequest" />
  </wsdl:message>
  <wsdl:message name="sellStockResponse">
    <wsdl:part name="sellStockResponse" element="tns:sellStockResponse" />
  </wsdl:message>
  <wsdl:message name="dispenseVoucher">
    <wsdl:part name="parameters" element="tns:dispenseVoucher" />
  </wsdl:message>
  <wsdl:message name="dispenseVoucherResponse">
    <wsdl:part name="dispenseVoucherResponse" element="tns:dispenseVoucherResponse" />
  </wsdl:message>
  <wsdl:message name="getVoucherRequest">
    <wsdl:part name="parameters" element="tns:getVoucherRequest" />
  </wsdl:message>
  <wsdl:message name="getVoucherResponse">
    <wsdl:part name="getVoucherResponse" element="tns:getVoucherResponse" />
  </wsdl:message>
  <wsdl:message name="addScheduleRequest">
    <wsdl:part name="parameters" element="tns:addScheduleRequest" />
  </wsdl:message>
  <wsdl:message name="addScheduleResponse">
    <wsdl:part name="addScheduleResponse" element="tns:addScheduleResponse" />
  </wsdl:message>
  <wsdl:message name="deleteScheduleRequest">
    <wsdl:part name="parameters" element="tns:deleteScheduleRequest" />
  </wsdl:message>
  <wsdl:message name="deleteScheduleResponse">
    <wsdl:part name="deleteScheduleResponse" element="tns:deleteScheduleResponse" />
  </wsdl:message>
  <wsdl:message name="getRuleListByContextIdRequest">
    <wsdl:part name="parameters" element="tns:getRuleListByContextIdRequest" />
  </wsdl:message>
  <wsdl:message name="getRuleListByContextIdResponse">
    <wsdl:part name="getRuleListByContextIdResponse" element="tns:getRuleListByContextIdResponse" />
  </wsdl:message>
  <wsdl:message name="coupontransfer">
    <wsdl:part name="parameters" element="tns:coupontransfer" />
  </wsdl:message>
  <wsdl:message name="coupontransferResponse">
    <wsdl:part name="coupontransferResponse" element="tns:coupontransferResponse" />
  </wsdl:message>
  <wsdl:message name="invoke">
    <wsdl:part name="parameters" element="tns:invokeRequest" />
  </wsdl:message>
  <wsdl:message name="invokeResponse">
    <wsdl:part name="invokeResponse" element="tns:invokeResponse" />
  </wsdl:message>
  <wsdl:message name="getChildListByReferenceIDRequest">
    <wsdl:part name="parameters" element="tns:getChildListByReferenceIDRequest" />
  </wsdl:message>
  <wsdl:message name="getChildListByReferenceIDResponse">
    <wsdl:part name="getChildListByReferenceIDResponse" element="tns:getChildListByReferenceIDResponse" />
  </wsdl:message>
  <wsdl:message name="getParentListByReferenceIDRequest">
    <wsdl:part name="parameters" element="tns:getParentListByReferenceIDRequest" />
  </wsdl:message>
  <wsdl:message name="getParentListByReferenceIDResponse">
    <wsdl:part name="getParentListByReferenceIDResponse" element="tns:getParentListByReferenceIDResponse" />
  </wsdl:message>
  <wsdl:portType name="UMarketSC">
    <wsdl:operation name="getAllAgentGroups">
      <wsdl:documentation>
                Get all the agent groups.
            </wsdl:documentation>
      <wsdl:input message="tns:getAllAgentGroups" />
      <wsdl:output message="tns:AgentGroupsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAgentGroupByAgentID">
      <wsdl:documentation>
                Get agent group/s by the agent ID.
            </wsdl:documentation>
      <wsdl:input message="tns:getAgentGroupByAgentID" />
      <wsdl:output message="tns:AgentGroupsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAgentByReference">
      <wsdl:documentation>
                Get agent by agent reference.
            </wsdl:documentation>
      <wsdl:input message="tns:getAgentByReference" />
      <wsdl:output message="tns:AgentResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAgentByReferenceID">
      <wsdl:documentation>
                Get agent by agent reference ID.
            </wsdl:documentation>
      <wsdl:input message="tns:getAgentByReferenceID" />
      <wsdl:output message="tns:AgentResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAccountByReferenceID">
      <wsdl:documentation>
                Get an account by the reference ID.
            </wsdl:documentation>
      <wsdl:input message="tns:getAccountByReferenceID" />
      <wsdl:output message="tns:AccountsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAccountByReferenceIDAndType">
      <wsdl:documentation>
                Get an account by the reference ID and type.
            </wsdl:documentation>
      <wsdl:input message="tns:getAccountByReferenceIDAndType" />
      <wsdl:output message="tns:AccountResponse" />
    </wsdl:operation>
    <wsdl:operation name="getTransactionByID">
      <wsdl:documentation>
                Query an existing transaction.
            </wsdl:documentation>
      <wsdl:input message="tns:getTransactionByID" />
      <wsdl:output message="tns:TransactionResponse" />
    </wsdl:operation>
    <wsdl:operation name="pin">
      <wsdl:documentation>
                This command is used to change the user's PIN, ie. the password they use to log
                in to the webservice. A successful change pin will also log the agent into the
                session – replacing the last prior successful login operation (including a prior
                change pin).
            </wsdl:documentation>
      <wsdl:input message="tns:pin" />
      <wsdl:output message="tns:pinResponse" />
    </wsdl:operation>
    <wsdl:operation name="sales">
      <wsdl:documentation>
                This function is used to summarise transactions the initiator performed.
                It is intended to be used by the inititator to summaries their total outbound sales activity involving
                special agents.
            </wsdl:documentation>
      <wsdl:input message="tns:sales" />
      <wsdl:output message="tns:salesResponse" />
    </wsdl:operation>
    <wsdl:operation name="createcoupon">
      <wsdl:documentation>
                Create a coupon in the system.
            </wsdl:documentation>
      <wsdl:input message="tns:createcoupon" />
      <wsdl:output message="tns:createcouponResponse" />
    </wsdl:operation>
    <wsdl:operation name="activate">
      <wsdl:documentation>
                This command is used to allow the agent to re­activate themselves – cancelling
                the prior deactivate/stop operation.
            </wsdl:documentation>
      <wsdl:input message="tns:activate" />
      <wsdl:output message="tns:activateResponse" />
    </wsdl:operation>
    <wsdl:operation name="sell">
      <wsdl:documentation>
                Request to debit the specified wallet.
            </wsdl:documentation>
      <wsdl:input message="tns:sell" />
      <wsdl:output message="tns:sellResponse" />
    </wsdl:operation>
    <wsdl:operation name="buy">
      <wsdl:documentation>
                Buy product or service.
            </wsdl:documentation>
      <wsdl:input message="tns:buy" />
      <wsdl:output message="tns:buyResponse" />
    </wsdl:operation>
    <wsdl:operation name="viewContact">
      <wsdl:documentation>
                Buy product or service.
            </wsdl:documentation>
      <wsdl:input message="tns:viewContact" />
      <wsdl:output message="tns:viewContactResponse" />
    </wsdl:operation>
    <wsdl:operation name="addContact">
      <wsdl:documentation>
                Buy product or service.
            </wsdl:documentation>
      <wsdl:input message="tns:addContact" />
      <wsdl:output message="tns:addContactResponse" />
    </wsdl:operation>
    <wsdl:operation name="deleteContact">
      <wsdl:documentation>
                Buy product or service.
            </wsdl:documentation>
      <wsdl:input message="tns:deleteContact" />
      <wsdl:output message="tns:deleteContactResponse" />
    </wsdl:operation>
    <wsdl:operation name="modifyContact">
      <wsdl:documentation>
                Buy product or service.
            </wsdl:documentation>
      <wsdl:input message="tns:modifyContact" />
      <wsdl:output message="tns:modifyContactResponse" />
    </wsdl:operation>
    <wsdl:operation name="donate">
      <wsdl:documentation>
                Donate funds to a specified charity.
            </wsdl:documentation>
      <wsdl:input message="tns:donate" />
      <wsdl:output message="tns:donateResponse" />
    </wsdl:operation>
    <wsdl:operation name="authorise">
      <wsdl:documentation>
                This command allows the logged in user to retrieve information about functions
                the are allowed to access.
            </wsdl:documentation>
      <wsdl:input message="tns:authorise" />
      <wsdl:output message="tns:authoriseResponse" />
    </wsdl:operation>
    <wsdl:operation name="authorise2">
      <wsdl:documentation>
                This command allows the logged in user to retrieve information about functions
                the are allowed to access.
            </wsdl:documentation>
      <wsdl:input message="tns:authorise2" />
      <wsdl:output message="tns:authorise2Response" />
    </wsdl:operation>
    <wsdl:operation name="reverse">
      <wsdl:documentation>
                This function is used to execute a transfer reversal.
                It is intended to be used by a debtor of a transaction to recover debited funds.
                Controls for accessing this function are intended to be provided via Rules capability restrictions.
                As such actual biz function will implement minimal checks only.
                A Transaction reversal will reverse stored value funds transfer only.
                Performing a reversal on an operation that also involved an external system will have no impact on that
                external system – only stored value details will be reversed.
            </wsdl:documentation>
      <wsdl:input message="tns:reverse" />
      <wsdl:output message="tns:reverseResponse" />
    </wsdl:operation>
    <wsdl:operation name="login">
      <wsdl:documentation>
                This command is used to authenticate the user. Most of the biz functions require
                authentication in order to function.
                If the session is already logged in then a subsequent successful login will switch
                the session to the new login agent
            </wsdl:documentation>
      <wsdl:input message="tns:login" />
      <wsdl:output message="tns:loginResponse" />
    </wsdl:operation>
    <wsdl:operation name="balance">
      <wsdl:documentation>
                This command is used to allow an agent to query their wallet balances.
            </wsdl:documentation>
      <wsdl:input message="tns:balance" />
      <wsdl:output message="tns:balanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="delete">
      <wsdl:documentation>
                This command is generally used to allow the logged in agent delete themselves.
                The logged in agent can delete other agents if they are setup as a trusted agent.
            </wsdl:documentation>
      <wsdl:input message="tns:delete" />
      <wsdl:output message="tns:deleteResponse" />
    </wsdl:operation>
    <wsdl:operation name="createsession">
      <wsdl:documentation>
                This command is used to create a new session. A valid session is required for all other commands.
            </wsdl:documentation>
      <wsdl:input message="tns:createsession" />
      <wsdl:output message="tns:createsessionResponse" />
    </wsdl:operation>
    <wsdl:operation name="delschedule">
      <wsdl:documentation>
                Delete a schedule.
            </wsdl:documentation>
      <wsdl:input message="tns:delschedule" />
      <wsdl:output message="tns:delscheduleResponse" />
    </wsdl:operation>
    <wsdl:operation name="transquery">
      <wsdl:documentation>
                Query an existing transaction.
            </wsdl:documentation>
      <wsdl:input message="tns:transquery" />
      <wsdl:output message="tns:transqueryResponse" />
    </wsdl:operation>
    <wsdl:operation name="transqueryext">
      <wsdl:documentation>
                Query an existing transaction via external reference.
            </wsdl:documentation>
      <wsdl:input message="tns:transqueryext" />
      <wsdl:output message="tns:transqueryextResponse" />
    </wsdl:operation>
    <wsdl:operation name="nextid">
      <wsdl:documentation>
                This command is used to pre­fetch the transaction ID that will be used for the
                next biz function. Get Trans ID is useful for tracking transactions incase
                connectivity is broken. The client can query the transaction to check whether or
                not the transaction went through.
            </wsdl:documentation>
      <wsdl:input message="tns:nextid" />
      <wsdl:output message="tns:nextidResponse" />
    </wsdl:operation>
    <wsdl:operation name="deactivate">
      <wsdl:documentation>
                This command is used to allow the agent to deactivate themselves. The agent or
                its linked agents cannot initiate any transaction type operation until deactivation
                is lifted.
            </wsdl:documentation>
      <wsdl:input message="tns:deactivate" />
      <wsdl:output message="tns:deactivateResponse" />
    </wsdl:operation>
    <wsdl:operation name="bankcashin">
      <wsdl:documentation>
                Request to cash in from an external bank account.
            </wsdl:documentation>
      <wsdl:input message="tns:bankcashin" />
      <wsdl:output message="tns:bankcashinResponse" />
    </wsdl:operation>
    <wsdl:operation name="confirm">
      <wsdl:documentation>
                Some commands require confirmation from other parties in order to process. The
                confirm command allows the client to confirm operations that are waiting for
                confirmation from the client.
            </wsdl:documentation>
      <wsdl:input message="tns:confirm" />
      <wsdl:output message="tns:confirmResponse" />
    </wsdl:operation>
    <wsdl:operation name="delchild">
      <wsdl:documentation>
                This command is used to allow the agent to remove a particular agent in the
                sales channel that they current supply stock to.
            </wsdl:documentation>
      <wsdl:input message="tns:delchild" />
      <wsdl:output message="tns:delchildResponse" />
    </wsdl:operation>
    <wsdl:operation name="transfer">
      <wsdl:documentation>
                Transfer stored value from specified wallet to a specified target. Note that if the
                target does not exist then the transaction will fail.
            </wsdl:documentation>
      <wsdl:input message="tns:transfer" />
      <wsdl:output message="tns:transferResponse" />
    </wsdl:operation>
    <wsdl:operation name="payment">
      <wsdl:documentation>
                Transfer stored value from specified wallet to a specified target. Note that if the
                target does not exist then the transaction will fail.
            </wsdl:documentation>
      <wsdl:input message="tns:payment" />
      <wsdl:output message="tns:paymentResponse" />
    </wsdl:operation>
    <wsdl:operation name="a2atransfer">
      <wsdl:documentation>
                A2A transfer stored value from specified wallet to a specified target. Note that if the
                target does not exist then the transaction will fail.
            </wsdl:documentation>
      <wsdl:input message="tns:a2atransfer" />
      <wsdl:output message="tns:a2atransferResponse" />
    </wsdl:operation>
    <wsdl:operation name="delparent">
      <wsdl:documentation>
                This command is used to allow the agent to break away from an existing sales channel.
            </wsdl:documentation>
      <wsdl:input message="tns:delparent" />
      <wsdl:output message="tns:delparentResponse" />
    </wsdl:operation>
    <wsdl:operation name="modify">
      <wsdl:documentation>
                This command is used to modify an agent in the system. Typically modify is used
                to allow the agent to modify its own details. An agent can modify other agents but
                the modifying agent must be set­up as a trusted agent.
            </wsdl:documentation>
      <wsdl:input message="tns:modify" />
      <wsdl:output message="tns:modifyResponse" />
    </wsdl:operation>
    <wsdl:operation name="billpaycompany">
      <wsdl:documentation>
                Pay a particular bill issued by a company.
            </wsdl:documentation>
      <wsdl:input message="tns:billpaycompany" />
      <wsdl:output message="tns:billpaycompanyResponse" />
    </wsdl:operation>
    <wsdl:operation name="billpay">
      <wsdl:documentation>
                Pay a particular bill.
            </wsdl:documentation>
      <wsdl:input message="tns:billpay" />
      <wsdl:output message="tns:billpayResponse" />
    </wsdl:operation>
    <wsdl:operation name="joinparent">
      <wsdl:documentation>
                This command is used to allow the agent to request to join an existing sales channel.
            </wsdl:documentation>
      <wsdl:input message="tns:joinparent" />
      <wsdl:output message="tns:joinparentResponse" />
    </wsdl:operation>
    <wsdl:operation name="changeparent">
      <wsdl:documentation>
                This command is used to allow an agent to change its existing sales channel.
            </wsdl:documentation>
      <wsdl:input message="tns:changeparent" />
      <wsdl:output message="tns:changeparentResponse" />
    </wsdl:operation>
    <wsdl:operation name="link">
      <wsdl:documentation>
                This command is used to link the client to another agent in the system. After
                successful link (i.e. After the target has confirmed the link) the client login
                session is still valid but it will apply to the agent prior to the linking – i.e.
                Transaction operations will be performed on the old wallet. In order to use the
                agent in its linked form the client must login again.
            </wsdl:documentation>
      <wsdl:input message="tns:link" />
      <wsdl:output message="tns:linkResponse" />
    </wsdl:operation>
    <wsdl:operation name="stop">
      <wsdl:documentation>
                This command is used to allow the agent to stop themselves. The agent or its
                linked agents cannot participate in any transaction type operation until stop is
                lifted.
            </wsdl:documentation>
      <wsdl:input message="tns:stop" />
      <wsdl:output message="tns:stopResponse" />
    </wsdl:operation>
    <wsdl:operation name="joinchild">
      <wsdl:documentation>
                This command is used to allow the agent to invite another agent to their sales
                channel as a down­stream supplier.
            </wsdl:documentation>
      <wsdl:input message="tns:joinchild" />
      <wsdl:output message="tns:joinchildResponse" />
    </wsdl:operation>
    <wsdl:operation name="query">
      <wsdl:documentation>
                Query is used to query last transaction details – specifically: Last Credit Transaction and Last Debit
                Transaction
            </wsdl:documentation>
      <wsdl:input message="tns:query" />
      <wsdl:output message="tns:queryResponse" />
    </wsdl:operation>
    <wsdl:operation name="billcollect">
      <wsdl:documentation>
                Request a user to pay a particular bill
            </wsdl:documentation>
      <wsdl:input message="tns:billcollect" />
      <wsdl:output message="tns:billcollectResponse" />
    </wsdl:operation>
    <wsdl:operation name="register">
      <wsdl:documentation>
                This command is used to register an agent into the system. The command has
                two modes of operation.
                If the soap client is logged in then the register command works in a register by
                proxy – provided the soap client is setup to perform register by proxy. This allows
                the client to create new wallets in the platform.
                If the soap client provides the initiator parameter register is a self register
                operation. This command allows the soap client to register themselves. In order
                to self register you need to provide an agent ref no (in the agent field) that clearly
                indicates a prior business relationship with the operator – such as a prepaid
                mobile number, a fixed line number or an internet account number. For self
                registration, if a new_pin is also provided then the agent is also automatically
                logged in.
                If the soap client provides agent – the soap client is attempting to register
                another agent on their behalf. Note that if you provide new_pin with the register
                command than your SOAP session will automatically login as the new agent. If
                you want to switch back to the original agent you logged in as you need to
                reissue a login command.
            </wsdl:documentation>
      <wsdl:input message="tns:register" />
      <wsdl:output message="tns:registerResponse" />
    </wsdl:operation>
    <wsdl:operation name="bankcashout">
      <wsdl:documentation>
                Request to cash out to an external bank account.
            </wsdl:documentation>
      <wsdl:input message="tns:bankcashout" />
      <wsdl:output message="tns:bankcashoutResponse" />
    </wsdl:operation>
    <wsdl:operation name="finalizeExtTrans">
      <wsdl:documentation>
                Reconcile a broken transaction by finalizing an incomplete external element (i.e. Like an IN that did
                not respond).
            </wsdl:documentation>
      <wsdl:input message="tns:finalizeExtTrans" />
      <wsdl:output message="tns:finalizeExtTransResponse" />
    </wsdl:operation>
    <wsdl:operation name="lastTransactions">
      <wsdl:documentation>
                Query information on your last transactions.
            </wsdl:documentation>
      <wsdl:input message="tns:lastTransactionsRequest" />
      <wsdl:output message="tns:lastTransactionsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAllCapSets">
      <wsdl:documentation>
                Get all cap sets.
            </wsdl:documentation>
      <wsdl:input message="tns:getAllCapSets" />
      <wsdl:output message="tns:CapSetsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getCapByID">
      <wsdl:documentation>
                Get a single cap detail record.
            </wsdl:documentation>
      <wsdl:input message="tns:getCapByID" />
      <wsdl:output message="tns:GetCapResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAllCapDetails">
      <wsdl:documentation>
                Get all cap details.
            </wsdl:documentation>
      <wsdl:input message="tns:getAllCapDetails" />
      <wsdl:output message="tns:getAllCapDetailsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAllCapDetailByCapsetId">
      <wsdl:input message="tns:getAllCapDetailByCapsetIdRequest" />
      <wsdl:output message="tns:getAllCapDetailByCapsetIdResponse" />
    </wsdl:operation>
    <wsdl:operation name="getCapDetailByID">
      <wsdl:documentation>
                Get a single cap detail record.
            </wsdl:documentation>
      <wsdl:input message="tns:getCapDetailByID" />
      <wsdl:output message="tns:getCapDetailResponse" />
    </wsdl:operation>
    <wsdl:operation name="addCapSet">
      <wsdl:documentation>
                Create a new cap set.
            </wsdl:documentation>
      <wsdl:input message="tns:addCapSet" />
      <wsdl:output message="tns:addCapSetResponse" />
    </wsdl:operation>
    <wsdl:operation name="modCapSet">
      <wsdl:documentation>
                Modify a cap set's description.
            </wsdl:documentation>
      <wsdl:input message="tns:modCapSet" />
      <wsdl:output message="tns:modCapSetResponse" />
    </wsdl:operation>
    <wsdl:operation name="delCapSet">
      <wsdl:documentation>
                Delete a cap set.
            </wsdl:documentation>
      <wsdl:input message="tns:delCapSet" />
      <wsdl:output message="tns:delCapSetResponse" />
    </wsdl:operation>
    <wsdl:operation name="addCapDetail">
      <wsdl:documentation>
                Add a cap set detail to an existing cap set.
            </wsdl:documentation>
      <wsdl:input message="tns:addCapDetail" />
      <wsdl:output message="tns:addCapDetailResponse" />
    </wsdl:operation>
    <wsdl:operation name="modCapDetail">
      <wsdl:input message="tns:modCapDetailRequest" />
      <wsdl:output message="tns:modCapDetailResponse" />
    </wsdl:operation>
    <wsdl:operation name="delCapDetail">
      <wsdl:documentation>
                Delete a cap detail.
            </wsdl:documentation>
      <wsdl:input message="tns:delCapDetail" />
      <wsdl:output message="tns:delCapDetailResponse" />
    </wsdl:operation>
    <wsdl:operation name="addRule">
      <wsdl:documentation>
                Add a new rule.
            </wsdl:documentation>
      <wsdl:input message="tns:addRuleRequest" />
      <wsdl:output message="tns:addRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="modRule">
      <wsdl:documentation>
                Modify a rule name/description.
            </wsdl:documentation>
      <wsdl:input message="tns:modRuleRequest" />
      <wsdl:output message="tns:modRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="delRule">
      <wsdl:documentation>
                Delete a rule.
            </wsdl:documentation>
      <wsdl:input message="tns:delRuleRequest" />
      <wsdl:output message="tns:delRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAllRules">
      <wsdl:documentation>
                Get all rules.
            </wsdl:documentation>
      <wsdl:input message="tns:getAllRules" />
      <wsdl:output message="tns:getAllRulesResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRule">
      <wsdl:documentation>
                Get the rule given a rule ID.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleRequest" />
      <wsdl:output message="tns:getRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="mapRule">
      <wsdl:documentation>
                Map a rule to a group.
            </wsdl:documentation>
      <wsdl:input message="tns:mapRuleRequest" />
      <wsdl:output message="tns:mapRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="unmapRule">
      <wsdl:documentation>
                Remove a rule mapping from a group.
            </wsdl:documentation>
      <wsdl:input message="tns:unmapRuleRequest" />
      <wsdl:output message="tns:unmapRuleResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleInstance">
      <wsdl:documentation>
                Get a single instance.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleInstanceRequest" />
      <wsdl:output message="tns:getRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleInstanceList">
      <wsdl:documentation>
                Get all instances belong to the rule.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleInstanceListRequest" />
      <wsdl:output message="tns:getRuleInstanceListResponse" />
    </wsdl:operation>
    <wsdl:operation name="addRuleInstance">
      <wsdl:documentation>
                Add a new rule instance, or clone an existing rule instance.
            </wsdl:documentation>
      <wsdl:input message="tns:addRuleInstanceRequest" />
      <wsdl:output message="tns:addRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="modRuleInstance">
      <wsdl:documentation>
                Change the name/description of an existing rule instance.
            </wsdl:documentation>
      <wsdl:input message="tns:modRuleInstanceRequest" />
      <wsdl:output message="tns:modRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="delRuleInstance">
      <wsdl:documentation>
                Delete a rule version/instance.
            </wsdl:documentation>
      <wsdl:input message="tns:delRuleInstanceRequest" />
      <wsdl:output message="tns:delRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="actRuleInstance">
      <wsdl:documentation>
                Activate a rule instance, making that instance the active instance for the rule.
            </wsdl:documentation>
      <wsdl:input message="tns:actRuleInstanceRequest" />
      <wsdl:output message="tns:actRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="deactRuleInstance">
      <wsdl:documentation>
                Deactivate a rule instance, making the active rule instance inactive.
            </wsdl:documentation>
      <wsdl:input message="tns:deactRuleInstanceRequest" />
      <wsdl:output message="tns:deactRuleInstanceResponse" />
    </wsdl:operation>
    <wsdl:operation name="addRuleEntity">
      <wsdl:documentation>
                Add a rule entity to an existing, inactive rule instance.
            </wsdl:documentation>
      <wsdl:input message="tns:addRuleEntityRequest" />
      <wsdl:output message="tns:addRuleEntityResponse" />
    </wsdl:operation>
    <wsdl:operation name="modRuleEntity">
      <wsdl:documentation>
                Modify an existing rule entity.
            </wsdl:documentation>
      <wsdl:input message="tns:modRuleEntityRequest" />
      <wsdl:output message="tns:modRuleEntityResponse" />
    </wsdl:operation>
    <wsdl:operation name="delRuleEntity">
      <wsdl:documentation>
                Delete a rule entity.
            </wsdl:documentation>
      <wsdl:input message="tns:delRuleEntityRequest" />
      <wsdl:output message="tns:delRuleEntityResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleEntity">
      <wsdl:documentation>
                Get a single entity.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleEntityRequest" />
      <wsdl:output message="tns:getRuleEntityResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleEntityList">
      <wsdl:documentation>
                Get all entities belonging to an instance.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleEntityListRequest" />
      <wsdl:output message="tns:getRuleEntityListResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleEntitiesByParent">
      <wsdl:documentation>
                Get all entities belonging to an instance where parant is a particular rule entity. Parentid=0 means get
                base entitites connected to the rule instance.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleEntitiesByParentRequest" />
      <wsdl:output message="tns:getRuleEntitiesByParentResponse" />
    </wsdl:operation>
    <wsdl:operation name="moveRuleEntityUp">
      <wsdl:documentation>
                Move a rule entity up.
            </wsdl:documentation>
      <wsdl:input message="tns:moveRuleEntityUpRequest" />
      <wsdl:output message="tns:moveRuleEntityUpResponse" />
    </wsdl:operation>
    <wsdl:operation name="moveRuleEntityDown">
      <wsdl:documentation>
                Move a rule entity down.
            </wsdl:documentation>
      <wsdl:input message="tns:moveRuleEntityDownRequest" />
      <wsdl:output message="tns:moveRuleEntityDownResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleTemplate">
      <wsdl:documentation>
                Get a particular rule template.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleTemplateRequest" />
      <wsdl:output message="tns:getRuleTemplateResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleTemplateList">
      <wsdl:documentation>
                Get all rule templates for a given context.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleTemplateListRequest" />
      <wsdl:output message="tns:getRuleTemplateListResponse" />
    </wsdl:operation>
    <wsdl:operation name="createGroup">
      <wsdl:documentation>
                Create a user group.
            </wsdl:documentation>
      <wsdl:input message="tns:createGroupRequest" />
      <wsdl:output message="tns:createGroupResponse" />
    </wsdl:operation>
    <wsdl:operation name="deleteGroup">
      <wsdl:documentation>
                Delete an agent group.
            </wsdl:documentation>
      <wsdl:input message="tns:deleteGroupRequest" />
      <wsdl:output message="tns:deleteGroupResponse" />
    </wsdl:operation>
    <wsdl:operation name="modifyGroup">
      <wsdl:documentation>
                Modify group name.
            </wsdl:documentation>
      <wsdl:input message="tns:modifyGroupRequest" />
      <wsdl:output message="tns:modifyGroupResponse" />
    </wsdl:operation>
    <wsdl:operation name="getGroup">
      <wsdl:documentation>
                Get a single group.
            </wsdl:documentation>
      <wsdl:input message="tns:getGroupRequest" />
      <wsdl:output message="tns:getGroupResponse" />
    </wsdl:operation>
    <wsdl:operation name="getAllGroups">
      <wsdl:documentation>
                Get all groups.
            </wsdl:documentation>
      <wsdl:input message="tns:getAllGroupsRequest" />
      <wsdl:output message="tns:getAllGroupsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getGroupByName">
      <wsdl:documentation>
                Get group by a name.
            </wsdl:documentation>
      <wsdl:input message="tns:getGroupByNameRequest" />
      <wsdl:output message="tns:getGroupByNameResponse" />
    </wsdl:operation>
    <wsdl:operation name="getGroupsByType">
      <wsdl:documentation>
                Get a group by a type.
            </wsdl:documentation>
      <wsdl:input message="tns:getGroupsByTypeRequest" />
      <wsdl:output message="tns:getGroupsByTypeResponse" />
    </wsdl:operation>
    <wsdl:operation name="mapAgent">
      <wsdl:documentation>
                Map agent to group.
            </wsdl:documentation>
      <wsdl:input message="tns:mapAgentRequest" />
      <wsdl:output message="tns:mapAgentResponse" />
    </wsdl:operation>
    <wsdl:operation name="unmapAgent">
      <wsdl:documentation>
                Remove agent from group.
            </wsdl:documentation>
      <wsdl:input message="tns:unmapAgentRequest" />
      <wsdl:output message="tns:unmapAgentResponse" />
    </wsdl:operation>
    <wsdl:operation name="createVoucher">
      <wsdl:documentation>
                Create a voucher.
            </wsdl:documentation>
      <wsdl:input message="tns:createVoucher" />
      <wsdl:output message="tns:createVoucherResponse" />
    </wsdl:operation>
    <wsdl:operation name="deleteVoucher">
      <wsdl:documentation>
                Delete a voucher.
            </wsdl:documentation>
      <wsdl:input message="tns:deleteVoucher" />
      <wsdl:output message="tns:deleteVoucherResponse" />
    </wsdl:operation>
    <wsdl:operation name="resetPin">
      <wsdl:documentation>
                Reset an agent's pin.
            </wsdl:documentation>
      <wsdl:input message="tns:resetPinRequest" />
      <wsdl:output message="tns:resetPinResponse" />
    </wsdl:operation>
    <wsdl:operation name="adjustWallet">
      <wsdl:documentation>
                Perform an adjustment on one of an agent's wallets.
            </wsdl:documentation>
      <wsdl:input message="tns:adjustWalletRequest" />
      <wsdl:output message="tns:adjustWalletResponse" />
    </wsdl:operation>
    <wsdl:operation name="modifyAccount">
      <wsdl:documentation>
                Modify an agent wallet.
            </wsdl:documentation>
      <wsdl:input message="tns:modifyAccountRequest" />
      <wsdl:output message="tns:modifyAccountResponse" />
    </wsdl:operation>
    <wsdl:operation name="sellStock">
      <wsdl:documentation>
                Initiate a sell stock transaction.
            </wsdl:documentation>
      <wsdl:input message="tns:sellStockRequest" />
      <wsdl:output message="tns:sellStockResponse" />
    </wsdl:operation>
    <wsdl:operation name="dispenseVoucher">
      <wsdl:documentation>
                Buy a voucher for a recipient agent.
            </wsdl:documentation>
      <wsdl:input message="tns:dispenseVoucher" />
      <wsdl:output message="tns:dispenseVoucherResponse" />
    </wsdl:operation>
    <wsdl:operation name="getVoucher">
      <wsdl:documentation>
                Retrieve a voucher for a given voucher ID.
            </wsdl:documentation>
      <wsdl:input message="tns:getVoucherRequest" />
      <wsdl:output message="tns:getVoucherResponse" />
    </wsdl:operation>
    <wsdl:operation name="addSchedule">
      <wsdl:documentation>
                Add Schedule allows a user to schedule any task to run sometime in the future.
            </wsdl:documentation>
      <wsdl:input message="tns:addScheduleRequest" />
      <wsdl:output message="tns:addScheduleResponse" />
    </wsdl:operation>
    <wsdl:operation name="deleteSchedule">
      <wsdl:documentation>
                Delete schedule allows a user to delete a schedule that they previously created in the system.
            </wsdl:documentation>
      <wsdl:input message="tns:deleteScheduleRequest" />
      <wsdl:output message="tns:deleteScheduleResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRuleListByContextId">
      <wsdl:documentation>
                Get all rules belonging to a given context.
            </wsdl:documentation>
      <wsdl:input message="tns:getRuleListByContextIdRequest" />
      <wsdl:output message="tns:getRuleListByContextIdResponse" />
    </wsdl:operation>
    <wsdl:operation name="coupontransfer">
      <wsdl:documentation>
                Transfer an amount from a Coupon
            </wsdl:documentation>
      <wsdl:input message="tns:coupontransfer" />
      <wsdl:output message="tns:coupontransferResponse" />
    </wsdl:operation>
    <wsdl:operation name="invoke">
      <wsdl:documentation>
            Invoke a non-financial operation on an end-point
          </wsdl:documentation>
      <wsdl:input message="tns:invoke" />
      <wsdl:output message="tns:invokeResponse" />
    </wsdl:operation>
    <wsdl:operation name="getChildListByReferenceID">
      <wsdl:documentation>
                Get a brief list of the children of the specified agent.
            </wsdl:documentation>
      <wsdl:input message="tns:getChildListByReferenceIDRequest" />
      <wsdl:output message="tns:getChildListByReferenceIDResponse" />
    </wsdl:operation>
    <wsdl:operation name="getParentListByReferenceID">
      <wsdl:documentation>
                Get a brief list of the parents of the specified agent.
            </wsdl:documentation>
      <wsdl:input message="tns:getParentListByReferenceIDRequest" />
      <wsdl:output message="tns:getParentListByReferenceIDResponse" />
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="UMarketSC" type="tns:UMarketSC">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <wsdl:operation name="getAllAgentGroups">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllAgentGroups" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AgentGroupsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAgentGroupByAgentID">
      <soap:operation soapAction="urn:UMARKETSCWS/getAgentGroupByAgentID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AgentGroupsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAgentByReference">
      <soap:operation soapAction="urn:UMARKETSCWS/getAgentByReference" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AgentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAgentByReferenceID">
      <soap:operation soapAction="urn:UMARKETSCWS/getAgentByReferenceID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AgentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountByReferenceID">
      <soap:operation soapAction="urn:UMARKETSCWS/getAccountByReferenceID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AccountsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountByReferenceIDAndType">
      <soap:operation soapAction="urn:UMARKETSCWS/getAccountByReferenceIDAndType" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="AccountResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTransactionByID">
      <soap:operation soapAction="urn:UMARKETSCWS/getTransactionByID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="TransactionResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="pin">
      <soap:operation soapAction="urn:UMARKETSCWS/pin" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="pinResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sales">
      <soap:operation soapAction="urn:UMARKETSCWS/sales" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="salesResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createcoupon">
      <soap:operation soapAction="urn:UMARKETSCWS/createcoupon" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="createcouponResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activate">
      <soap:operation soapAction="urn:UMARKETSCWS/activate" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="activateResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sell">
      <soap:operation soapAction="urn:UMARKETSCWS/sell" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="sellResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="buy">
      <soap:operation soapAction="urn:UMARKETSCWS/buy" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="buyResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="viewContact">
      <soap:operation soapAction="urn:UMARKETSCWS/viewContact" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="viewContactResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addContact">
      <soap:operation soapAction="urn:UMARKETSCWS/addContact" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addContactResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteContact">
      <soap:operation soapAction="urn:UMARKETSCWS/deleteContact" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deleteContactResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modifyContact">
      <soap:operation soapAction="urn:UMARKETSCWS/modifyContact" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modifyContactResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="donate">
      <soap:operation soapAction="urn:UMARKETSCWS/donate" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="donateResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="authorise">
      <soap:operation soapAction="urn:UMARKETSCWS/authorise" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="authoriseResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="authorise2">
      <soap:operation soapAction="urn:UMARKETSCWS/authorise2" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="authorise2Response" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="reverse">
      <soap:operation soapAction="urn:UMARKETSCWS/reverse" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="reverseResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="login">
      <soap:operation soapAction="urn:UMARKETSCWS/login" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="loginResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="balance">
      <soap:operation soapAction="urn:UMARKETSCWS/balance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="balanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delete">
      <soap:operation soapAction="urn:UMARKETSCWS/delete" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deleteResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createsession">
      <soap:operation soapAction="urn:UMARKETSCWS/createsession" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="createsessionResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delschedule">
      <soap:operation soapAction="urn:UMARKETSCWS/delschedule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delscheduleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transquery">
      <soap:operation soapAction="urn:UMARKETSCWS/transquery" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="transqueryResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transqueryext">
      <soap:operation soapAction="urn:UMARKETSCWS/transqueryext" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="transqueryextResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="nextid">
      <soap:operation soapAction="urn:UMARKETSCWS/nextid" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="nextidResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deactivate">
      <soap:operation soapAction="urn:UMARKETSCWS/deactivate" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deactivateResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="bankcashin">
      <soap:operation soapAction="urn:UMARKETSCWS/bankcashin" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="bankcashinResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="confirm">
      <soap:operation soapAction="urn:UMARKETSCWS/confirm" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="confirmResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delchild">
      <soap:operation soapAction="urn:UMARKETSCWS/delchild" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delchildResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transfer">
      <soap:operation soapAction="urn:UMARKETSCWS/transfer" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="transferResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="payment">
      <soap:operation soapAction="urn:UMARKETSCWS/payment" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="paymentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="a2atransfer">
      <soap:operation soapAction="urn:UMARKETSCWS/a2atransfer" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="a2atransferResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delparent">
      <soap:operation soapAction="urn:UMARKETSCWS/delparent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delparentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modify">
      <soap:operation soapAction="urn:UMARKETSCWS/modify" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modifyResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="billpaycompany">
      <soap:operation soapAction="urn:UMARKETSCWS/billpaycompany" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="billpaycompanyResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="billpay">
      <soap:operation soapAction="urn:UMARKETSCWS/billpay" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="billpayResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="joinparent">
      <soap:operation soapAction="urn:UMARKETSCWS/joinparent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="joinparentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeparent">
      <soap:operation soapAction="urn:UMARKETSCWS/changeparent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="changeparentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="link">
      <soap:operation soapAction="urn:UMARKETSCWS/link" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="linkResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="stop">
      <soap:operation soapAction="urn:UMARKETSCWS/stop" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="stopResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="joinchild">
      <soap:operation soapAction="urn:UMARKETSCWS/joinchild" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="joinchildResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="query">
      <soap:operation soapAction="urn:UMARKETSCWS/query" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="queryResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="billcollect">
      <soap:operation soapAction="urn:UMARKETSCWS/billcollect" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="billcollectResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="register">
      <soap:operation soapAction="urn:UMARKETSCWS/register" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="registerResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="bankcashout">
      <soap:operation soapAction="urn:UMARKETSCWS/bankcashout" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="bankcashoutResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="finalizeExtTrans">
      <soap:operation soapAction="urn:UMARKETSCWS/finalizeExtTrans" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="finalizeExtTransResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="lastTransactions">
      <soap:operation soapAction="urn:UMARKETSCWS/lastTransactions" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="lastTransactionsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllCapSets">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllCapSets" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="CapSetsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCapByID">
      <soap:operation soapAction="urn:UMARKETSCWS/getCapByID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="GetCapResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllCapDetails">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllCapDetails" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getAllCapDetailsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllCapDetailByCapsetId">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllCapDetailByCapsetId" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getAllCapDetailByCapsetIdResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCapDetailByID">
      <soap:operation soapAction="urn:UMARKETSCWS/getCapDetailByID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getCapDetailResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addCapSet">
      <soap:operation soapAction="urn:UMARKETSCWS/addCapSet" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addCapSetResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modCapSet">
      <soap:operation soapAction="urn:UMARKETSCWS/modCapSet" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modCapSetResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delCapSet">
      <soap:operation soapAction="urn:UMARKETSCWS/delCapSet" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delCapSetResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addCapDetail">
      <soap:operation soapAction="urn:UMARKETSCWS/addCapDetail" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addCapDetailResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modCapDetail">
      <soap:operation soapAction="urn:UMARKETSCWS/modCapDetail" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modCapDetailResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delCapDetail">
      <soap:operation soapAction="urn:UMARKETSCWS/delCapDetail" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delCapDetailResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRule">
      <soap:operation soapAction="urn:UMARKETSCWS/addRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modRule">
      <soap:operation soapAction="urn:UMARKETSCWS/modRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delRule">
      <soap:operation soapAction="urn:UMARKETSCWS/delRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllRules">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllRules" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getAllRulesResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRule">
      <soap:operation soapAction="urn:UMARKETSCWS/getRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="mapRule">
      <soap:operation soapAction="urn:UMARKETSCWS/mapRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="mapRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unmapRule">
      <soap:operation soapAction="urn:UMARKETSCWS/unmapRule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="unmapRuleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleInstanceList">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleInstanceList" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleInstanceListResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/addRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/modRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/delRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="actRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/actRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="actRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deactRuleInstance">
      <soap:operation soapAction="urn:UMARKETSCWS/deactRuleInstance" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deactRuleInstanceResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addRuleEntity">
      <soap:operation soapAction="urn:UMARKETSCWS/addRuleEntity" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addRuleEntityResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modRuleEntity">
      <soap:operation soapAction="urn:UMARKETSCWS/modRuleEntity" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modRuleEntityResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delRuleEntity">
      <soap:operation soapAction="urn:UMARKETSCWS/delRuleEntity" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="delRuleEntityResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleEntity">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleEntity" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleEntityResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleEntityList">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleEntityList" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleEntityListResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleEntitiesByParent">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleEntitiesByParent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleEntitiesByParentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="moveRuleEntityUp">
      <soap:operation soapAction="urn:UMARKETSCWS/moveRuleEntityUp" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="moveRuleEntityUpResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="moveRuleEntityDown">
      <soap:operation soapAction="urn:UMARKETSCWS/moveRuleEntityDown" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="moveRuleEntityDownResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleTemplate">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleTemplate" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleTemplateResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleTemplateList">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleTemplateList" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleTemplateListResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createGroup">
      <soap:operation soapAction="urn:UMARKETSCWS/createGroup" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="createGroupResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteGroup">
      <soap:operation soapAction="urn:UMARKETSCWS/deleteGroup" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deleteGroupResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modifyGroup">
      <soap:operation soapAction="urn:UMARKETSCWS/modifyGroup" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modifyGroupResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getGroup">
      <soap:operation soapAction="urn:UMARKETSCWS/getGroup" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getGroupResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllGroups">
      <soap:operation soapAction="urn:UMARKETSCWS/getAllGroups" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getAllGroupsResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getGroupByName">
      <soap:operation soapAction="urn:UMARKETSCWS/getGroupByName" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getGroupByNameResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getGroupsByType">
      <soap:operation soapAction="urn:UMARKETSCWS/getGroupsByType" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getGroupsByTypeResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="mapAgent">
      <soap:operation soapAction="urn:UMARKETSCWS/mapAgent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="mapAgentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unmapAgent">
      <soap:operation soapAction="urn:UMARKETSCWS/unmapAgent" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="unmapAgentResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createVoucher">
      <soap:operation soapAction="urn:UMARKETSCWS/createVoucher" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="createVoucherResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteVoucher">
      <soap:operation soapAction="urn:UMARKETSCWS/deleteVoucher" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deleteVoucherResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="resetPin">
      <soap:operation soapAction="urn:UMARKETSCWS/resetPin" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="resetPinResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="adjustWallet">
      <soap:operation soapAction="urn:UMARKETSCWS/adjustWallet" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="adjustWalletResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modifyAccount">
      <soap:operation soapAction="urn:UMARKETSCWS/modifyAccount" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="modifyAccountResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sellStock">
      <soap:operation soapAction="urn:UMARKETSCWS/sellStock" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="sellStockResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="dispenseVoucher">
      <soap:operation soapAction="urn:UMARKETSCWS/dispenseVoucher" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="dispenseVoucherResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getVoucher">
      <soap:operation soapAction="urn:UMARKETSCWS/getVoucher" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getVoucherResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addSchedule">
      <soap:operation soapAction="urn:UMARKETSCWS/addSchedule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="addScheduleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSchedule">
      <soap:operation soapAction="urn:UMARKETSCWS/deleteSchedule" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="deleteScheduleResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRuleListByContextId">
      <soap:operation soapAction="urn:UMARKETSCWS/getRuleListByContextId" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getRuleListByContextIdResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="coupontransfer">
      <soap:operation soapAction="urn:UMARKETSCWS/coupontransfer" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="coupontransferResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="invoke">
      <soap:operation soapAction="urn:UMARKETSCWS/invoke" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="invokeResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getChildListByReferenceID">
      <soap:operation soapAction="urn:UMARKETSCWS/getChildListByReferenceID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getChildListByReferenceIDResponse" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getParentListByReferenceID">
      <soap:operation soapAction="urn:UMARKETSCWS/getParentListByReferenceID" />
      <wsdl:input>
        <soap:body use="literal" parts="parameters" />
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal" parts="getParentListByReferenceIDResponse" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="UMarketSC">
    <wsdl:documentation>UMarket SelfCare2 SOAP interface.</wsdl:documentation>
    <wsdl:port name="UMarketSC" binding="tns:UMarketSC">
      <soap:address location="http://10.1.5.64:8280/services/umarketsc" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>